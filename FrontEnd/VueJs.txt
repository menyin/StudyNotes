*基本使用：
 安装node8.9+
 如之前安装过旧版脚手架3.x，则需先卸载 npm uninstall vue-cli -g
 安装脚手架 npm install -g @vue/cli 
 安装快速原型开发编译.vue文件 npm install -g @vue/cli-service-global
 查看vue-cli版本：vue --version
 注意：如仍然要用旧版vue的vue init功能，则可安装一个桥接工具 npm install -g @vue/cli-init 

*.vue文件是组件，需要通过vue serve xxx.vue
  注意如果组件名称为App.vue 则可以简写vue serve

*scr/assets和public目录，都可以防止静态资源
 assets是放置的资源会经过webpack处理（如sass等可以编译或压缩），一般用相对路径引用。一般静态资源建议放置在此目录
 public里的内容是发布时直接拷贝，一般用绝对路径引用。引入一些三方库
 
*创建项目方式
 *命令vue create myproject 在当前目录下创建
    *vue create myproject时会有一个“Please pick a preset”，可以选择css构建方式，语法检查支持等等。 默认选择Babel 
 *命令vue ui 调出图形化界面进行创建
    *创建项目时默认使用npm做包管理器，另外还可选yarn（很多人推荐这个，因为用起来简单，下载时不会丢包）


*启动方式：
 *到有App.vue的文件目录里执行vue serve
 *到vue所在的node项目的根目录，执行npm run serve  实际上是执行package里的serve脚本（package.json里的scripts节点实际上是一些执行的脚本，用npm run xxx即可）

*打包：
 默认使用webpack，内部集成，在vue ui图形界面下可以看webpack配置，在命令行创建项目方式下，则需要再package.json的script里配置脚本inspect:vue-cli-service inspect

*main.js解析
    import Vue from 'vue'
    import App from './App.vue'
    
    Vue.config.productionTip = false//生产模式下，去掉命令行相关的提示，以提升运行性能效率
    
    new Vue({
      render: h => h(App), //render实际是一个函数，通过传递App并调用，生产出真实的Dom
    }).$mount('#app') //上述的真实Dom会通过此方法会被渲染到/public/index.html里的div#app里


**var vm=new Vue(options);//其中options是一些固定的参数，会被vue框架进行组装代理，
  而vm实例里是不能找出一些自定义的一些参数，如options.myClick这种自定义的参数是不会被解析。

***特别注意：在vue的<template>节点下，必须爆伤一层<view>****业务代码****</view>，否则有一些组件将不被识别

**组件里面的props里的属性，不能通过当前组件进行修改值。在当前组件内修改值的情况需要用data里的属性

*
vm.$watch('a', function (newValue, oldValue) {
  // 这个回调将在 `vm.a` 改变后调用
})

*Vue 的$mount()为手动挂载，在项目中可用于延时挂载（例如在挂载之前要进行一些其他操作、判断等），之后要手动挂载上。
 new Vue时，el和$mount并没有本质上的不同。

*vue的mixins是混入，和extends差不多。 混入到vue组件的方法会优于组件自身方法执行，属性数据则会合并，同名则被自身方法或属性覆盖。

*v-if和v-for在同一dom节点使用时，v-for的优先级高于v-if，
 此时如果需要先执行v-if逻辑再执行v-for，则需要将v-if放到父dom里，v-for放到子dom


*package.json是可以手工配置，可以有包版本的通配符，所以下载的包的版本是不确定的。
 package-lock.json是在npm install时，这时就会生成一份package-lock.json,里面有下载包的具体版本
 所以package-lock.json上传到git时，就可以让所有开发人员的包版本保持一致。

*uni-app中的vue组件是可以用到nvue文件页面里的，开发App时HbuilderX会根据nvue后缀页面文件将使用app原生组件进行渲染。
 如果是vue后缀页面文件，开发App时HbuilderX会使用webview进行渲染。

*测试API  https://api.597.com/web/mi.api?act=seachJObList


？？测试讲.vue文件当成js被引入到其它.vue页面

*Hbuilder安装Android模拟器  https://ask.dcloud.net.cn/article/151
 Android相关开发工具链接 https://www.androiddevtools.cn/
 相关问题解决链接：https://blog.csdn.net/xqhys/article/details/88772504
                   https://www.cnblogs.com/JICG/p/11889600.html

*chekbox不支持v-model；v-model只在input和textarea生效

*vue中的数据MVVM响应中，监控的是数据模型的变化，不会监控数据模型属性的变化。 如this.data={name:1}会响应，而this.data.name=1却不会响应。

**597简历预览方案，用微软的在线预览doc：https://view.officeapps.live.com/op/view.aspx?src=https://ecs.597.com/1.doc

************uniapp********************
*uniapp的组件及其目录不要用-连接，而使用驼峰命名法，否则在有些小程序（如支付宝小程序）会有问题。
 
uniapp支持的css样式长度单位为px rpx  
 *rpx即整个设计图宽度按750rpx划分，每一个格子都是1rpx。  
  注意要在pages.json里设置"rpxCalcBaseDeviceWidth": 375,"rpxCalcIncludeWidth": 750

？A页面引用B组件，B组件引用C组件。 此时在A的this.refs里有BC组件的引用。 但是在B的this.refs里去没有C组件的引用

*******************************IM 交接材料******************************************
*源码及相关材料在码云  CSFED 组织里
 
*文档http://csfed.gitee.io/press

**jeecg-uniapp项目里路由用this.$route在h5端可以但是到了手机端就不行了，实际上是要用官方的this.$Router，大小写区分
  如果再App端路由不能用，可以将路由的mode设置为hash，因为app是没有history模式的
  而获取路由参数不是用$Router而是$Route，如this.$Route.query.userId

？vue如何引入js
  *按需引入（如该js是非export导出，也可以使用）  let moment=require("@/node_modules/moment/moment.js");
  *预定义引入（要求export导出，并且需要预编译）import Request from '@/common/luch-request/index.js'
  注意在vue页面中引入js模块而非vue模块，则直接用变量接收而不能用花括号接收
  import {p1,p2} from '@/p.js'; //错误示例，在代码中不能使用p1，p2
  import p from '@/p.js'; //正确示例，在代码中可以使用p.p1,p.p2
   
*getCurrentPages()//获取页面栈集合
 var prevPage = pages[pages.length - 2];prevPage.$vm.targetUser =111;//获取上一个页面栈并设置参数（注意：在h5上prevPage.$vm不存在而在app上是存在的）

*unipush的使用
 官方文档 https://uniapp.dcloud.io/api/plugins/push（其中 https://ask.dcloud.net.cn/article/35622这个文档+jeecg文档结合使用）
 全面的文档（CSDN收藏）：https://blog.csdn.net/kouryoushine/article/details/102607337   
 https://uniapp.dcloud.io/use-html5plus
 手机厂商配置：https://www.dcloud.io/docs/a/unipush/manufacturer.pdf
 注意：开通UniPush后，需在后台配置“厂商推送设置”，配置好厂商参数后请一定要提交云打包，并且使用“自有证书”打签名包；将云打包后的安装包安装到手机上，再获取cid 进行离线厂商推送测试，不可使用基座方式获取的cid进行离线厂商推送测试。
 概念：通知消息：可以再手机通知栏接收到，用户点击后触发App代码里的click事件。并处理消息
       透传消息：自定义消息，需要自定义通知栏的样式，unipush推送内容格式符合特定的{title:"标题",content:"内容",payload:{type:1,fId:1}}格式，在Android端也会转为通知消息。
       自定义基座：相当于集成了特定调试环境的包，如调试用的Apk
       离线消息：App被强杀后还能收到消息。在测试过程中，发现App并没办法接收离线消息。
 大致的步骤（主要官方文档里的小文档+jeecg）：
       1.云打包：打包的时候一定要用自有证书，并且自定义基座；（经测试不一定要自定义基座）
       2.手机厂商配置：华为厂商配置：注意华为要生成agconnect-services.json给unipush官方配置
       3.配置unipush官方配置，注意Android应用用keytool进行签名在这里的配置要和打包的配置要一致。 打包要需要用“自有证书”
       
 intent:#Intent;action=android.intent.action.oppopush;launchFlags=0x14000000;component=io.dcloud.HBuilder/io.dcloud.PandoraEntry;S.UP-OL-SU=true;S.title=测试标题;S.content=测试内容;S.payload=test;end


*Uniapp更新方案，新建一个功能模块用于上传新的apk和wgt包，提供给前端App一个获取最新一条记录的url即可更新。
 详见代码里的方案，并参考官方方案https://ask.dcloud.net.cn/article/182
 特别注意：1、上架审核期间不要弹出热更新提示；2、热更新内容使用https下载，避免被三方网络劫持；        
表字段说明：
"appid":1,//应用的Appid，可以AndroidAppId+'|'+IosAppId
"status":1,//升级标志，1：需要升级；0：无需升级
"note": "修复bug1；\n修复bug2;",更新说明
"version": "13.3.2",//版本规则：13.3是大版本用提示下载更新，2是小版本热更新即可
"androidUrl":"http://www.example.com/uniapp.apk" //更新包下载地址//即包可访问地址 -----需要上传功能
"iosUrl": "https://apps.apple.com/cn/app/id135949123" //更新包下载地址//即包可访问地址 -----需要上传功能
"wgtUrl": "http://www.example.com/uniapp.wgt" //更新包下载地址  -----需要上传功能

versionCode

*uniapp中的切换tab是不能传递参数的，因为像小程序这类原生的tab也是不能传递参数的

*腾讯云小程序音视频通讯Uniapp版  https://ext.dcloud.net.cn/plugin?id=1286

*Chocolatey是Windows上的包管理工具，就是安装软件包的。
 开发人员可以用来安装和配置自己的开发环境，例如我需要的JDK、Node、git、Chrome、VS Code、Android Studio、IntelliJ IDEA、WebStorm、7-zip、Hyper....很多人都会问哪里下载
 Chrome，除了现在http://google.cn/chrome可以下载之外，choco是安装Chrome的最好方式。


*chenmushan-template是一个集成了uview脚手架，可以用
 uview UI框架
 uni-swipe-action 滑动操作组件   https://ext.dcloud.net.cn/plugin?id=181   需要做大量的平台兼容处理
 css3动画效果  https://animista.net/
 自由截图组件  https://ext.dcloud.net.cn/plugin?id=1031

*http请求框架调研（对比uni-ajax和luch-request）
 *两者唯一比较大的区别是：uni-ajax支持快应用，luch-request不支持。uni-ajax有文件上传、luch-request没有。另外luch-rquest使用人数远大于uni-ajax
 *使用luch-request做文件上传（图片上传）：
   *微信小程序用uni.uploadFile上传时出现 “Provisional headers are shown"，应该是597的api接口要用https，否则会再跳转一层造成的。
   *http请求的时候需要注意参数name: 'Filedata'、如果线上的api地址则要用https否则http会多一次跳转产生问题（可以通过拦截器来将http强转为https）
  微信小程序开发者工具在http请求过程中不需要登陆，也不需要使用到公司的appid，直接游客模式即可
  luch-request不支持快应用，经过调研发现快应用的使用频率很少，应用也很少。
  TypeError: Cannot read property 'forceUpdate' of undefined



*使用webview时
 *不能动态的往内部传参，只能静态的对webview的src赋值并传参
 *webview的样式不能通过静态样式定义，而只能通过动态在js代码里添加
   var currentWebview = this.$scope.$getAppWebview() //此对象相当于html5plus里的plus.webview.currentWebview()。在uni-app里vue页面直接使用plus.webview.currentWebview()无效，非v3编译模式使用this.$mp.page.$getAppWebview()
      setTimeout(function() {
        wv = currentWebview.children()[0]
        console.log(that.window.windowHeight-107-that.StatusBar-52);
        wv.setStyle({width:'100%',top:110+that.StatusBar,height:that.window.windowHeight-110-that.StatusBar-52+4})//4是微调
      }, 1000); //如果是页面初始化调用时，需要延时一下


*使用uniapp发布H5后，应用到传统web动静分离环境中
  *uniap发布H5时使用域名 http://cdn.597.top，
  *manifest.json里配置基础路径 ./  
  *修改uniapp发布H5后的static/index.xxxxx.js里的A.p，可能是p.p，反正就是到“./”
  *复制生成的index.html到php模板比如叫index.html.php, 修改相关js，css的引用路径

*uniapp开发h5时，如果<template>节点里的内容缺少标签，则会导致dom渲染出问题，这时候onLoad函数不会执行，此时还不会报错。



************************webpack begin*******************************
*运行打包：在项目根目录下运行webpack命令
*webpack只能处理打包.js和.json文件，css或img等资源要另外的安装特定的loader进行处理。
*webpack的loader是用于将非js的资源包装成js以便能够被webpak执行处理。它是在module.rules中引入
 webpack的plugin是webpack的功能扩展，需要用require('modelName')引入

*sytle-loader和MinCssExtractPlugin.loader的区别：前者是将css处理成js通过在页面输出<style>标签，后者是拷贝css文件然后然后通过link引入css文件

*webpack用url-loader来处理图片资源时，可以设置limit，如果大小在limit范围内的图片会被转换为base64图片

*webpack-dev-server是本地开发服务器，可以实时编译刷新页面。 客园通过npx webpack-dev-server命令启动
 注意：用webpack-dev-server只会在内存中编译打包，不会生产输出编译后内容。

*airbnb是一个代码规范指南

*tree shaking：去除无用代码（摇晃树，让无用的树叶掉落） 
 前提：1.必须使用ES6模块化 2.开启production环境
 场景：假如A模块引用B模块的B.b1方法，而B.b2没用到，就可以通过webpack的tree shaking功能在打包时将B.b2剔除。

*code split：代码分割，
 作用： 可以做按需加载、可以让模块拆分开下载加快速度。
 实现方式：*单入口变为多入口，从entry配置入手
                 *splitChunks配置，另外还可以将公共的js分离出来。
                 *如果在A中用import('./B').then(res=>{...})来引入B，则B模块也会单独打包成一个文件。 因为这样的写法就是需要懒加载

*懒加载  import('./B').then(res=>{...})
*prefetch预加载，正常加载资源时浏览器是并行加载（同时加载多个文件），而prefetch预加载是在其它正常资源加载完了再进行预加载
 
*PWA：渐进式网络开发应用程序（网页离线可访问）

*多进程打包：其实应该就是多线程打包，多开一些线程工作而已。 

*external排除打包，比如将引入cdn的jQuery排除打包范围内，而直接在页面用<script>标签引入。

*第三方库可以用dll功能来打包，如jQuery
************************webpack end*******************************