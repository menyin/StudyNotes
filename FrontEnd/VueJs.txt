*基本使用：
 安装node8.9+
 如之前安装过旧版脚手架3.x，则需先卸载 npm uninstall vue-cli -g
 安装脚手架 npm install -g @vue/cli 
 安装快速原型开发编译.vue文件 npm install -g @vue/cli-service-global
 查看vue-cli版本：vue --version
 注意：如仍然要用旧版vue的vue init功能，则可安装一个桥接工具 npm install -g @vue/cli-init 

*vue可以与jQuery混用，注意要vue.js在jQuery.js之前引用

*.vue文件是组件，需要通过vue serve xxx.vue
  注意如果组件名称为App.vue 则可以简写vue serve

*scr/assets和public目录，都可以防止静态资源
 assets是放置的资源会经过webpack处理（如sass等可以编译或压缩），一般用相对路径引用。一般静态资源建议放置在此目录
 public里的内容是发布时直接拷贝，一般用绝对路径引用。引入一些三方库
 
*创建项目方式
 *命令vue create myproject 在当前目录下创建
    *vue create myproject时会有一个“Please pick a preset”，可以选择css构建方式，语法检查支持等等。 默认选择Babel 
 *命令vue ui 调出图形化界面进行创建
    *创建项目时默认使用npm做包管理器，另外还可选yarn（很多人推荐这个，因为用起来简单，下载时不会丢包）


*启动方式：
 *到有App.vue的文件目录里执行vue serve
 *到vue所在的node项目的根目录，执行npm run serve  实际上是执行package里的serve脚本（package.json里的scripts节点实际上是一些执行的脚本，用npm run xxx即可）

*打包：
 默认使用webpack，内部集成，在vue ui图形界面下可以看webpack配置，在命令行创建项目方式下，则需要再package.json的script里配置脚本inspect:vue-cli-service inspect

*vue在IE下兼容处理方案
    <script src="//cdn.597.com/js/browser.min.js"></script>
    <script src="//cdn.597.com/js/polyfill.min.js"></script>
    <script src="//cdn.597.com/js/vue.min.js"></script>

*main.js解析
    import Vue from 'vue'
    import App from './App.vue'
    
    Vue.config.productionTip = false//生产模式下，去掉命令行相关的提示，以提升运行性能效率
    
    new Vue({
      render: h => h(App), //render实际是一个函数，通过传递App并调用，生产出真实的Dom
    }).$mount('#app') //上述的真实Dom会通过此方法会被渲染到/public/index.html里的div#app里


**var vm=new Vue(options);//其中options是一些固定的参数，会被vue框架进行组装代理，
  而vm实例里是不能找出一些自定义的一些参数，如options.myClick这种自定义的参数是不会被解析。

***特别注意：在vue的<template>节点下，必须爆伤一层<view>****业务代码****</view>，否则有一些组件将不被识别

***vue的data等数据属性名不能以$或_开头，否则将不会被vue框架代理。 这些符号开头的名字是内置名字

**组件里面的props里的属性，不能通过当前组件进行修改值。在当前组件内修改值的情况需要用data里的属性

*
vm.$watch('a', function (newValue, oldValue) {
  // 这个回调将在 `vm.a` 改变后调用
})

*watch在使用时，数据变量的函数不能写成箭头函数（如：a:(newV,oldV)=>{...}）否则会出现this为undefined的bug


*Vue 的$mount()为手动挂载，在项目中可用于延时挂载（例如在挂载之前要进行一些其他操作、判断等），之后要手动挂载上。
 new Vue时，el和$mount并没有本质上的不同。

*vue的mixins是混入，和extends差不多。 混入到vue组件的方法会优于组件自身方法执行，属性数据则会合并，同名则被自身方法或属性覆盖。

*v-if和v-for在同一dom节点使用时，v-for的优先级高于v-if，
 此时如果需要先执行v-if逻辑再执行v-for，则需要将v-if放到父dom里，v-for放到子dom

*Vue的子组件的props的属性是供父组件传递数据，在子组件内不能作为data属性进行变更。 这是官方建议，会报错。

*package.json是可以手工配置，可以有包版本的通配符，所以下载的包的版本是不确定的。
 package-lock.json是在npm install时，这时就会生成一份package-lock.json,里面有下载包的具体版本
 所以package-lock.json上传到git时，就可以让所有开发人员的包版本保持一致。

*uni-app中的vue组件是可以用到nvue文件页面里的，开发App时HbuilderX会根据nvue后缀页面文件将使用app原生组件进行渲染。
 如果是vue后缀页面文件，开发App时HbuilderX会使用webview进行渲染。

*测试API  https://api.597.com/web/mi.api?act=seachJObList


？？测试讲.vue文件当成js被引入到其它.vue页面

？本地intellij启动vue项目，用http://localhost:3000/访问则正常加载页面，用http://127.0.0.1:3000/访问则会出现页面一直不断重复刷新加载。请问为什么
   这个问题通常是由于浏览器的同源策略引起的，localhost 和 127.0.0.1 虽然在物理上是相同的，但在浏览器中，它们被视为不同的源。同源策略限制了在不同源之间进行跨域访问。
   由于 Vue CLI 默认会使用开发服务器，而开发服务器通常在某个主机和端口上监听，因此使用 localhost:3000 和 127.0.0.1:3000 实际上被视为不同的源。
  要解决这个问题，你可以尝试以下方法：
   1、清除浏览器缓存：有时候浏览器缓存可能会引起奇怪的行为，清除缓存后再尝试访问。
   2、检查浏览器的安全策略：一些浏览器可能对不同的域名使用不同的安全策略，导致行为不同。尝试在浏览器设置中调整安全策略。
   3、修改开发服务器配置：在 Vue CLI 的 vue.config.js 配置文件中，你可以尝试配置 devServer 的 host 选项，将其设置为 0.0.0.0，这样服务器会监听所有的可用 IP 地址，而不仅仅是 localhost。

*Hbuilder安装Android模拟器  https://ask.dcloud.net.cn/article/151
 Android相关开发工具链接 https://www.androiddevtools.cn/
 相关问题解决链接：https://blog.csdn.net/xqhys/article/details/88772504
                   https://www.cnblogs.com/JICG/p/11889600.html

*chekbox不支持v-model；v-model只在input和textarea生效

*vue中的数据MVVM响应中，监控的是数据模型的变化，不会监控数据模型属性的变化。 如this.data={name:1}会响应，而this.data.name=1却不会响应。

**597简历预览方案，用微软的在线预览doc：https://view.officeapps.live.com/op/view.aspx?src=https://ecs.597.com/1.doc

*Vue.ls 实际上是带过期时间和存取监控的LocalStorage

*keep-alive 是 Vue 的内置组件，用于减少不必要的渲染，提要页面性能

*Vue强制刷新data 
  this.$forceUpdate()
  this.$set(this.obj, ‘age', 27)
  有时候在一些场景下数据改变并不会触发vue更新dom，此时可以定义如下方法来强制刷新数据，其中reloading是一个数据变量
  reload() {
        this.reloading = true
        this.$nextTick(() => this.reloading = false)
  }

************uniapp********************
*uniapp的组件及其目录不要用-连接，而使用驼峰命名法，否则在有些小程序（如支付宝小程序）会有问题。
 
uniapp支持的css样式长度单位为px rpx  
 *rpx即整个设计图宽度按750rpx划分，每一个格子都是1rpx。  
  注意要在pages.json里设置"rpxCalcBaseDeviceWidth": 375,"rpxCalcIncludeWidth": 750

？A页面引用B组件，B组件引用C组件。 此时在A的this.refs里有BC组件的引用。 但是在B的this.refs里去没有C组件的引用

*uniapp和vue的差异：
 uniapp不支持自定义指令
 unipp的simple-router不支持动态路由，即不能根据接口数据重组路由列表
 unipp的simple-router的嵌套路由目前只支持h5。  要套入公共组件（如commons）可采用vue-inset-loader（实践行不通）  详见 https://ask.dcloud.net.cn/article/39345

*uniapp可以用Vue.prototype.myname定义全局变量，但是只能在vue组件方法里使用，无法直接在vue模板里使用。 
 如果要直接在模板里使用，可以用Vue.mixin(data() { return{...}}）进行混入全局变量和方法

*注意：有时候用uview带的表单验证时出现某些表单项无法验证，可能是用v-if导致元素在最初加载时并不存在，改为v-show即可。  有可能<u-form-item>这类标签并不支持v-show，可套个<view>再使用v-show

*******************************IM 交接材料 begin******************************************
*源码及相关材料在码云  CSFED 组织里

*在http://xm.597.top/person/chat.html聊天页面有相关云信配置信息
 var appConfig = {
        appKey: "9877e7b70f30866c74e409a5ea60373d",
        token: "0da1c0c6d121eccfda94c7c6a30786f1",
        account: "per_39a2236652750",
        userType: Number("1"),
        photo: "https://pic.597.com/photo/2022/05/15/2022051507244424267.png",
        uid: "39a2236652750",
        host: "597.top",
        cdnUrl: "//cdn.597.top/im/",
        cdnRootUrl: "//cdn.597.top/",
        prefix: {
          1: "per_",
          2: "com_"
        }
      }

 
*文档http://csfed.gitee.io/press

*IM项目使用了 Vue.js 2.x 版本的语法，并结合了 vue-property-decorator 库，该库为 Vue.js 提供了 TypeScript 支持。此外，还使用了 Vuex 管理应用状态，Vue Router 进行页面路由。

*******************************IM 交接材料 end******************************************

**jeecg-uniapp项目里路由用this.$route在h5端可以但是到了手机端就不行了，实际上是要用官方的this.$Router，大小写区分
  如果再App端路由不能用，可以将路由的mode设置为hash，因为app是没有history模式的
  而获取路由参数不是用$Router而是$Route，如this.$Route.query.userId

？vue如何引入js
  *按需引入（如该js是非export导出，也可以使用）  let moment=require("@/node_modules/moment/moment.js");
  *预定义引入（要求export导出，并且需要预编译）import Request from '@/common/luch-request/index.js'
  注意在vue页面中引入js模块而非vue模块，则直接用变量接收而不能用花括号接收
  import {p1,p2} from '@/p.js'; //错误示例，在代码中不能使用p1，p2
  import p from '@/p.js'; //正确示例，在代码中可以使用p.p1,p.p2
   
*getCurrentPages()//获取页面栈集合
 var prevPage = pages[pages.length - 2];prevPage.$vm.targetUser =111;//获取上一个页面栈并设置参数（注意：在h5上prevPage.$vm不存在而在app上是存在的）

*unipush的使用
 官方文档 https://uniapp.dcloud.io/api/plugins/push（其中 https://ask.dcloud.net.cn/article/35622这个文档+jeecg文档结合使用）
 全面的文档（CSDN收藏）：https://blog.csdn.net/kouryoushine/article/details/102607337   
 https://uniapp.dcloud.io/use-html5plus
 手机厂商配置：https://www.dcloud.io/docs/a/unipush/manufacturer.pdf
 注意：开通UniPush后，需在后台配置“厂商推送设置”，配置好厂商参数后请一定要提交云打包，并且使用“自有证书”打签名包；将云打包后的安装包安装到手机上，再获取cid 进行离线厂商推送测试，不可使用基座方式获取的cid进行离线厂商推送测试。
 概念：通知消息：可以再手机通知栏接收到，用户点击后触发App代码里的click事件。并处理消息
       透传消息：自定义消息，需要自定义通知栏的样式，unipush推送内容格式符合特定的{title:"标题",content:"内容",payload:{type:1,fId:1}}格式，在Android端也会转为通知消息。
       自定义基座：相当于集成了特定调试环境的包，如调试用的Apk
       离线消息：App被强杀后还能收到消息。在测试过程中，发现App并没办法接收离线消息。
 大致的步骤（主要官方文档里的小文档+jeecg）：
       1.云打包：打包的时候一定要用自有证书，并且自定义基座；（经测试不一定要自定义基座）
       2.手机厂商配置：华为厂商配置：注意华为要生成agconnect-services.json给unipush官方配置
       3.配置unipush官方配置，注意Android应用用keytool进行签名在这里的配置要和打包的配置要一致。 打包要需要用“自有证书”
       
 intent:#Intent;action=android.intent.action.oppopush;launchFlags=0x14000000;component=io.dcloud.HBuilder/io.dcloud.PandoraEntry;S.UP-OL-SU=true;S.title=测试标题;S.content=测试内容;S.payload=test;end


*Uniapp更新方案，新建一个功能模块用于上传新的apk和wgt包，提供给前端App一个获取最新一条记录的url即可更新。
 详见代码里的方案，并参考官方方案https://ask.dcloud.net.cn/article/182
 特别注意：1、上架审核期间不要弹出热更新提示；2、热更新内容使用https下载，避免被三方网络劫持；        
表字段说明：
"appid":1,//应用的Appid，可以AndroidAppId+'|'+IosAppId
"status":1,//升级标志，1：需要升级；0：无需升级
"note": "修复bug1；\n修复bug2;",更新说明
"version": "13.3.2",//版本规则：13.3是大版本用提示下载更新，2是小版本热更新即可
"androidUrl":"http://www.example.com/uniapp.apk" //更新包下载地址//即包可访问地址 -----需要上传功能
"iosUrl": "https://apps.apple.com/cn/app/id135949123" //更新包下载地址//即包可访问地址 -----需要上传功能
"wgtUrl": "http://www.example.com/uniapp.wgt" //更新包下载地址  -----需要上传功能

versionCode

*uniapp中的切换tab是不能传递参数的，因为像小程序这类原生的tab也是不能传递参数的

*腾讯云小程序音视频通讯Uniapp版  https://ext.dcloud.net.cn/plugin?id=1286

*Chocolatey是Windows上的包管理工具，就是安装软件包的。
 开发人员可以用来安装和配置自己的开发环境，例如我需要的JDK、Node、git、Chrome、VS Code、Android Studio、IntelliJ IDEA、WebStorm、7-zip、Hyper....很多人都会问哪里下载
 Chrome，除了现在http://google.cn/chrome可以下载之外，choco是安装Chrome的最好方式。


*chenmushan-template是一个集成了uview脚手架，可以用
 uview UI框架
 uni-swipe-action 滑动操作组件   https://ext.dcloud.net.cn/plugin?id=181   需要做大量的平台兼容处理
 css3动画效果  https://animista.net/
 自由截图组件  https://ext.dcloud.net.cn/plugin?id=1031

*uview使用
 *表单验证时候，如果验证失败弹出的样式errorType=toast  则trigger: ['change','blur']这些出发时机并不能吐司，而会在this.$refs.uForm.validate(valid => {}）调用时触发。
 ？请求组件需要换成lunch-request、toast需要换成jeecg的uniapp吐司
 
*http请求框架调研（对比uni-ajax和luch-request）
 *两者唯一比较大的区别是：uni-ajax支持快应用，luch-request不支持。uni-ajax有文件上传、luch-request没有。另外luch-rquest使用人数远大于uni-ajax
 *使用luch-request做文件上传（图片上传）：
   *微信小程序用uni.uploadFile上传时出现 “Provisional headers are shown"，应该是597的api接口要用https，否则会再跳转一层造成的。
   *http请求的时候需要注意参数name: 'Filedata'、如果线上的api地址则要用https否则http会多一次跳转产生问题（可以通过拦截器来将http强转为https）
  微信小程序开发者工具在http请求过程中不需要登陆，也不需要使用到公司的appid，直接游客模式即可
  luch-request不支持快应用，经过调研发现快应用的使用频率很少，应用也很少。
  TypeError: Cannot read property 'forceUpdate' of undefined

*<router-view>是vue使用的，uniapp内使用时，只能支持h5环境。 如果是APP或小程序的话是不行的。 所以如果要兼容生成各端是无法做公共模板抽出的
 也就是在uniapp开发下只有h5可以使用嵌套路由。 如果在App.vue里强制使用<router-view>还会出现uni.showToast()等API方法不能用

*使用webview时
 *不能动态的往内部传参，只能静态的对webview的src赋值并传参
 *webview的样式不能通过静态样式定义，而只能通过动态在js代码里添加
   var currentWebview = this.$scope.$getAppWebview() //此对象相当于html5plus里的plus.webview.currentWebview()。在uni-app里vue页面直接使用plus.webview.currentWebview()无效，非v3编译模式使用this.$mp.page.$getAppWebview()
      setTimeout(function() {
        wv = currentWebview.children()[0]
        console.log(that.window.windowHeight-107-that.StatusBar-52);
        wv.setStyle({width:'100%',top:110+that.StatusBar,height:that.window.windowHeight-110-that.StatusBar-52+4})//4是微调
      }, 1000); //如果是页面初始化调用时，需要延时一下


*使用uniapp发布H5后，应用到传统web动静分离环境中
  *uniap发布H5时使用域名 http://cdn.597.top/，
  *manifest.json里配置基础路径 ./  
  *修改uniapp发布H5后的static/index.xxxxx.js里的A.p，可能是p.p，反正就是到“./”
  *复制生成的index.html到php模板比如叫index.html.php, 修改相关js，css的引用路径
  *注意：可以直接manifest.json里配置h5的"base" : "//cdn.597.ny/testH5/"，注意不能加http:


*uniapp开发h5时，如果<template>节点里的内容缺少标签，则会导致dom渲染出问题，这时候onLoad函数不会执行，此时还不会报错。

*uniapp做本地跨域：
  *网上在vue.config.js或mainfest.json里配置的devServer代理中其实是host属性是要代理替换的域名，
   即host配置了http://localhost,则config.js里的CONFIG[process.env.NODE_ENV]要为http://localhost才能被替换。！！！！ 
   ！！！如果配置无效，可尝试CONFIG[process.env.NODE_ENV]配置成空字符串""，或许可以成功
   如果CONFIG[process.env.NODE_ENV]配置的是http://m.597.top则匹配不到
  *一般会在vue.config.js配置，而不再mainfest.json里配置，因为uniapp是对vue的一层包装。  但是如果前者无效，则可试着在后者配置，原因可能是未安装webpack等相关东西
  vue.config.js做跨域代理说明： 
  比如代码中用this.$http.post('/sys/login')调用api，此时设置vue.config.js内设置跨域代理，就相当于干了几件事情：
   1、把请求，从原本的basicpath+'/sys/login'变成 'http://localhost:8080'+'/sys/login', 这样做就让api请求的域和本地应用服务的域相同了
   2、把 'http://localhost:8080'+'/sys/login'这个重装的请求，在本地服务进行代理，代理到vue.config.js配置的target节点，即目标服务器。
   3、如果请求路径的'/sys'字符串，到了目标服务器要变成'/jeecg-boot/sys'，可以用pathRewrite: {'^/sys': '/jeecg-boot/sys'} 进行重写路径


*uniapp弹窗后禁止页面滚动，可以直接使用scroll-view组件，可以控制页面的滚动
 所以当用uni-drawer时，一般配合scroll-view使用
 特别注意uni-drawer弹框组件，在有u-sticky组件的页面里时，会发生zIndex层混乱。 可将uni-drawer弹框组件套一层u-sticky组件然后放在页面最后（一定是最后！）

*cs-app中IM相关sdkjs太大（已分包），uniapp调试小程序时预览会提示包超出2M，但是发行后却不会出问题。  这个可能是Hbuilder的问题。 

************************webpack begin*******************************
*运行打包：在项目根目录下运行webpack命令
*webpack只能处理打包.js和.json文件，css或img等资源要另外的安装特定的loader进行处理。
*webpack的loader是用于将非js的资源包装成js以便能够被webpak执行处理。它是在module.rules中引入
 webpack的plugin是webpack的功能扩展，需要用require('modelName')引入

*sytle-loader和MinCssExtractPlugin.loader的区别：前者是将css处理成js通过在页面输出<style>标签，后者是拷贝css文件然后然后通过link引入css文件

*webpack用url-loader来处理图片资源时，可以设置limit，如果大小在limit范围内的图片会被转换为base64图片

*webpack-dev-server是本地开发服务器，可以实时编译刷新页面。 客园通过npx webpack-dev-server命令启动
 注意：用webpack-dev-server只会在内存中编译打包，不会生产输出编译后内容。

*airbnb是一个代码规范指南

*tree shaking：去除无用代码（摇晃树，让无用的树叶掉落） 
 前提：1.必须使用ES6模块化 2.开启production环境
 场景：假如A模块引用B模块的B.b1方法，而B.b2没用到，就可以通过webpack的tree shaking功能在打包时将B.b2剔除。

*code split：代码分割，
 作用： 可以做按需加载、可以让模块拆分开下载加快速度。
 实现方式：*单入口变为多入口，从entry配置入手
                 *splitChunks配置，另外还可以将公共的js分离出来。
                 *如果在A中用import('./B').then(res=>{...})来引入B，则B模块也会单独打包成一个文件。 因为这样的写法就是需要懒加载

*懒加载  import('./B').then(res=>{...})
*prefetch预加载，正常加载资源时浏览器是并行加载（同时加载多个文件），而prefetch预加载是在其它正常资源加载完了再进行预加载
 
*PWA：渐进式网络开发应用程序（网页离线可访问）

*多进程打包：其实应该就是多线程打包，多开一些线程工作而已。 

*external排除打包，比如将引入cdn的jQuery排除打包范围内，而直接在页面用<script>标签引入。

*第三方库可以用dll功能来打包，如jQuery
************************webpack end*******************************

*小程序分享功能uni.share({options});
 options.type 设置分享形式，如图文、纯文字、纯图片、音乐、视频、小程序等
 options.scene 设置分享到聊天界面/朋友圈/收藏


****************************ImgCook begin*******************************************
*imgcook切图生成html
 不同类型代码生成：可以输出uniApp、Vue、Android... （在代码生成处设置）
 不同的尺寸适配单位：rpx、rem....  （在代码生成处设置）
 代码节点模式有两种：Rax和React，前者生成的代码的节点的 是View、Picture、Text 而不是 Div、Image、Text。（在团队设置处）
 组件库导入：组件库类型要注意区分Rax和React， 比如AntDesign是属于React类型的组件库。注意：要先在【团队设置】发布编辑器画布资源
                   1.在imgcook官网组件库列表复制组件库，「团队设置」-「组件库设置」-添加组件库
                   2.「团队设置」-「组件库设置」-「自定义画布」-发布编辑器画布资源，成功后进行第3步
                   3.「发布历史」复制发布结果url到「编辑器设置」里的画布资源URL，才能在编辑器里使用外部组件
 样式命名规则：可以用驼峰等不同命名规则

*最佳实践
 
*imgcook导出的h5代码，使用rem时，基准字体选择25px会使得整个设计图页面自适应完美
 如果用25px 倒推rem设置，则需要设置document基础字体为document.documentElement.style.fontSize=50*document.documentElement.clientWidth/750+'px'

*imgcook导出微信小程序代码时，<image>是source属性，需要用正则表达式(source="\{"uri":")(.*)("\}")替换成src，或者可以修改导出代码的DSL（在团队设置里面设置）
 
****************************ImgCook end*******************************************


****************************uView begin*******************************************
*u-tags组件里的单位是默认是uni.$u.config.unit = 'rpx'设置的单位
 此时在计算底下滑块时用的px（详见组件源码），这时候可以将相关属性设置为px单位，如lineWidth="20px"
 这样的话会造成下滑块滑动距离错误计算错误
 ****所以uview相关组件的属性里配置数值时尽量带上单位

*uview有一些全局样式，但是官方使用文档并没有说明要额外引入，只引入了@import "uview-ui/index.scss";
 如想要使用布局相关样式就要引入@import "uview-ui/libs/css/flex.scss";  否则没法使用相关布局类样式

*uView包体积过大造成微信上线失败，可以在Hbuilder里设置打包压缩代码

****************************uView end*******************************************

****************************阿里图标库使用 begin*******************************************
*阿里图标格式分为“彩色”、ttf、woff、woff2，特别注意当项目格式勾选了“彩色”则使用图标时不能设置字体颜色
 但是不勾选“彩色”则在使用图标时候就要用svg进行渲染彩色，但是微信小程序并不能编译svg标签。 如：<svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#tcon-yishu"></use></svg>
 最终解决方案：彩色图标和单色图标分开两个项目库，然后都引入。
 
*项目引入字体图标库的iconfont.ttf、iconfont.woff、iconfont.woff2和uview的iconfont.ttf、iconfont.woff、iconfont.woff2重名，需要将"iconfont"改名,
 或者直接用在线文件，因为在线文件有带版本号
 使用： <text class="tcon tcon-home u-success" ></text> 其中 u-sucess是颜色样式

**微信小程序目前还不能编译 svg 标签，因此在微信小程序中无法使用常规方式引用阿里 Symbol 类型的图标。

*相对完整的图标库 【 小假哥_多彩_icon083   365 icons】
 https://www.iconfont.cn/collections/detail?spm=a313x.7781069.1998910419.d9df05512&cid=35099

*使用图标库时，项目中多个图标因为重名，会导致整个项目图标都变黑色。
 解决办法: 1、图标名称都唯一，如果有可能重名则改名（如篮球，很多图标都可能叫篮球）,但很麻烦，不用
                2、将主库（多彩假日哥的库）和额外附加的库分开两个，然后都引入到项目中，这样就不会冲突

****************************阿里图标库使用 end*******************************************

****************************IM   begin*******************************************
*架构文档 https://www.processon.com/view/link/5e184ed8e4b0f5a7ed0a3e8f#map
*开发文档  http://csfed.gitee.io/press/     或者在https://gitee.com/CSFED/press项目里

？pending.ts的实现，类似Java的future，达到所有任务执行完再返回结果


*如何在打包时处理发布静态资源路径（publicPath）和首页放置路径不同的问题？
 0、webpage打包完再进行以下操作
 1、vue.config.js配置publicPath为一个固定的字符串，然后用部署脚本deploy.ts来全局替换成cdn的路径
 2、deploy.ts里，将index.html的内容复制到index.html.php文件里

*平常测试可以在chat页面里用console里用localstorage去存储IM相关的用户状态数据

*高卓的IM项目中需要下载 node-sass@4.14.1  引出node+Python相关依赖下载问题
 需要安装node-gyp    详见http://blog.maptoface.com/post/544

*测试账号密码在G:\th597-talent-net-im\th597-talent-net-im\mock\datas.js
 本地启动测试服务不需要输入密码即可登录

*关注点：
 *eventBus ： 所有一些业务方法通过G:\th597-talent-net-im\th597-talent-net-im\src\utils\eventBus\index.ts里的eventBus注入到Vue里进行使用
                      G:\th597-talent-net-im\th597-talent-net-im\src\utils\eventBus\目录里最后都是混合成一个文件，只是写的时候分离
 *在浏览器console里输入bda.***可以获取当前账号相关数据
 *云信相关的一些东西 ：G:\th597-talent-net-im\th597-talent-net-im\src\utils\sdk.ts
 *交接视频里1:47:00处开始讲打包部署
 *高卓调试本地mock服务时，使用账号  com_dc525c3: { appKey: '9877e7b70f30866c74e409a5ea60373d', token: 'ec02187110fb5a460fdedb00e57e3d28' },不行
                                           使用账号per_be1c9c4717298: {appKey: "9877e7b70f30866c74e409a5ea60373d",token: "050f3b01930acf66d11b0b211ce3bfac"},可以
 *打包部署，先打包后部署，运行G:\th597-talent-net-im\th597-talent-net-im\build\dev.js  再运行G:\th597-talent-net-im\th597-talent-net-im\build\deploy.ts
  注意是执行build:dev



****************************IM end*******************************************

****************************React begin*******************************************
*基本原理：
  和Vue等语言差不多，需要通过编译最终生成Html。 不一样在于React基本都是通过js来创建虚拟dom元素，并通过jsx语法进行嵌套，最终生成虚拟dom树。
  根据不同需求，可以将虚拟dom生成不同平台的前端原生代码，如Android。
*基本语法：
  创建虚拟dom：const VDOM = React.createElement('div'，{id:123}，'子元素')  // 参数分别：dom标签名，dom标签属性（包括事件属性），除了第一二参数以后的参数都是该dom标签下的子元素。
  挂载虚拟dom：ReactDOM.render(<App />, document.getElementById("root")); // App元素作为虚拟dom的根元素会被挂载到实际的dom元素#root上

****************************React end*********************************************

****************************Vue3 begin*********************************************
*学习bili《尚硅谷Vue3入门到实战，最新版vue3+TypeScript前端开发教程》 内含课件

*import type { Rule } from 'ant-design-vue/es/form';
 在 TypeScript 中，import type 是一种特殊的导入形式，它只导入类型，而不导入值。这意味着在运行时，这种导入不会产生任何实际的代码。有如下特点：
 1、仅导入类型信息：import type 只用于导入类型声明，例如接口、类型别名、枚举等。它不会引入实际的 JavaScript 对象。
 2、不产生运行时代码：在编译后，import type 引入的代码不会出现在生成的 JavaScript 文件中。这对于避免在 JavaScript 输出中产生不必要的代码或解决循环依赖问题非常有用。

*vue开发浏览器插件 https://devtools.vuejs.org/

*reactive对象里的ref属性在js代码中读取时并不需要加.value

*修改reactive对象时不能用=号赋值，而应该用Object.assign(reactiveObj,newObj)，其实是对象属性赋值。不能用reactiveObj=newObj; 否则会失去响应式

*let {name,age} =  toRefs(reactiveObj);//name,age是ref的
 let {name,age} =  reactiveObj;//name,age是不是ref的，没有响应式。 它相当于let name =reactiveObj.name; let age =reactiveObj.age
 同理let age = toRef(reactiveObj,'age')

*以下写法注意下，因为indexSytle取值要用 indexSytle.value，所以要用v-model:value做双向绑定
 v-model:value="indexStyle"
  const indexStyle = ref(0);
 
*用以下代码定义已经存在的全局变量 window.myGlobalVar，有个好处就是myGlobalVar可以规定好类型
declare const window: {
    myGlobalVar: string;
};

*Vue.js Devtools 插件
 *详见blogs《vue devtools使用指南》
 *通过插件还可以定位到相应的组件dom，并且能直接定位打开对应的组件的代码文件。这个功能比较实用
 *在控制台中输入$vm0，可以得到当前选中组件的vue实例对象。其中$vm0.ctx包含了该组件的变量和方法
 *Inspect DOM按钮，可以将当前组件dom定位跳转到html的dom
 *select component in the page按钮，可以定位选择到组件dom
 *安装了 Vue.js Devtools 插件之后没有看到 Pinia 面板，可能配置问题，可以按以下尝试
  __INTLIFY_PROD_DEVTOOLS__: true 或 Vue.config.devtools = true;
 
*如何在静态的html使用Typescript？
 使用github上的typescript-compile项目，即引入以下2个js
 <script type="text/javascript" src="typescript.min.js"></script>
 <script type="text/javascript" src="typescript.compile.min.js"></script>


*vite的原理，详见csdn《Vite介绍及实现原理》
 ？defineAsyncComponent：如果A页面或其依赖的组件被配置为异步组件，并且使用了动态import()语法或defineAsyncComponent函数，那么在请求A页面时，这些组件将按需加载。
 在开发时，在浏览器和本地开发代码都会有socket，当代码更新时，会通知到浏览器加载新的模块，开发环境服务只是返回更新的模块。 整个过程vite只更新局部模块，没有全局编译更新。

****************************Vue3 end*********************************************

****************************Typescript begin*********************************************
*Partial作用是将User类型属性都转为可选属性，生成新的PartialUser类型
 type PartialUser = Partial<User>; 
 

*type TableProps = Partial<DynamicProps<BasicTableProps>>;
 DynamicProps 的作用在于为 Vue 组件的 props 提供一种灵活的类型定义方式。在 Vue 组件中，props 是父组件传递给子组件的数据。通常，我们期望这些 props 是静态的、不可变的，或者至少是明确知道它们如何被修改和响应的。然而，在某些情况下，我们可能希望 props 能够接受更广泛的值类型，包括普通的值、Vue 的响应式引用（Ref），以及计算属性（ComputedRef）。


*以下代码中，TableActionType & { getForm: () => FormActionType; }是怎么意思？
 答：&的意思是类型交并，它会生成新的类型，此例中代表这个新类型要是TableActionType类型并且包含一个getForm方法
export function useListTable(tableProps: TableProps): [
  (instance: TableActionType, formInstance: UseTableMethod) => void,
  TableActionType & {
    getForm: () => FormActionType;
  },
  {
    rowSelection: any;
    selectedRows: Ref<Recordable[]>;
    selectedRowKeys: Ref<any[]>;
  }
] {
//......此处实现代码省略
}

*以下代码<T = Recordable>什么意思？
 答：<T = Recordable>用于约束T类型如果没有传递，则默认为Recordable类型
export interface TableActionType {
  getSelectRows: <T = Recordable>() => T[];
}
****************************Typescript end*********************************************
