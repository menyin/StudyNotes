******计划8月19~11月19用3个月完成eecg总体框架学习：前端，后端，数据结构******

************************前端 begin******************************
？注意vue extend和minix的区别，前者有点像继承，数据和方法是所有组件共享的。 后者有点像字节码混入，数据和方法不共享但却是可以动态注入到特定组件中。

*在前端的页面中visible数据来控制一些弹窗的显隐

*v-model和v-decorator的区别，前者是双向的，后者是input改变会传递到model，但是model改变不会传递到input，可以通过this.form.setFieldsValue()刷新到input里

*在$store.state.app.multipage 设置多/单页签模式

*前端的路由不是固定的而是在permission.js里配置 路由前置守卫拦截处理

？vue的路由学习

*jeecg常用的前端组件，在系统页面菜单：常见案例-自定义组件。代码封装在src/components/jeecg

*前端路由逻辑：
 1.在permission.js做前置守卫拦截添加路由列表
 2.通过后端获取的菜单列表menuData生成路由列表constRoutes
 3.menuData里的菜单项的component字段代表页面组件，children代表子页面组件。

*前端的登录状态逻辑:
 *在整个App初始化的在main.js里如果有开启VUE_APP_SSO=true 则会通过是在src/cas/sso.js 做cas验证，整个cas单点登录逻辑在官方文档有流程图
 *如果没有开启cas验证功能则正常初始化App，并且通过在permission.js的路由前置守卫进行普通登录检测
 ？？具体的cas项目的服务部署实施及使用需要再学习。 可以通过docker镜像部署   博客园《CAS单点登录系统简介》可做简单了解。

*online表单的js增强使用技巧（结合生成代码去研究online的代码）
  1、在列表页的js增强代码中，研究that对象可以发现通过改变高级查询的相关参数可以进行自定义查询条件，然后查询数据
       如：cms利用这个规律，再加上url的hash参数，在js增强中实现了根据栏目编码来筛选数据，关键2条代码如下：
           that.superQuery.params=JSON.stringify(paramsArry);
           that.loadData();
  2、在表单页的js增强代码中，可通过that获取到页面之下的一些vue组件，从而改变这些组件的一些配置或行为。需要一层层查找
       如cms中，富文本编辑jEditor组件可以用以下代码获取，并设置高度：
       var editorObj=that.$refs.cms_article_data[0].$children[0].$children[0].$children[0].$children[0].$children[0].$children[0].$children[0].$children[0].$children[1].$children[0];
       editorObj.$set(editorObj.init,'height',600);
       editorObj.reload();
      特别注意：后来发现直接在tieda-front项目里更改jEditor组件的配置即可，online表单也是用项目本身配置的组件，不用通过上述方式去更改editor的配置


*tinymce富文本编辑器文档 http://tinymce.ax-z.cn/quick-start.php
 *表情工具会有问题：“tinymce 5.0版本 关于Emoticons 表情加载 chrome不支持问题”

*jeecg使用的是一款基于Vue的表单设计器FormMaking


****** 改造成鱼泡网项目 begin *******
*需要做测试：
 1、测试部署路径更改   使用vue-config.js里的publicPath处理，详见csdn《Vue的index.html与其他静态文件分离部署》
 2、测试后端拦截登录控制改造
 3、测试扒的页面嵌入jeecg页面会不会样式错乱  左侧菜单是否需要改造
 4、测试左侧

<router-link :to="{ path: 'register', query: { plan: 'private' }}">Register</router-link>
去掉页面加载动画 public/index.html中#loader-wrapper注释掉
【选中首页的时候不显示背景颜色，只应用于左侧菜单】这个功能去掉（全局搜索即可看代码）
*相关改造：
  *permission.js中去掉NProgress.start() 进度条
  *request.js中去掉请求错误（如无权限跳转登录页），err函数
  *user.js中GetPermissionList方法中将用户权限菜单数据变为静态的staticPermissions变量
  *SysPermissionController.java#getUserPermissionByToken中去掉“添加首页路由”部分代码
  *去掉getAction的头部设置
  *改造主界面BasicLayout.vue、TabLayout.vue、SideMenu.vue、GlobalFooter.vue、Login.vue、LoginAccount.vue，很多样式在TabLayout.vue里
  *util.js#generateIndexRouter的【"path": "*", "redirect": "/job/list", "hidden": true】为找到匹配路由重定向为默认页，即首页路由
  *在原本的list页面，去掉固定的mixins混入JeecgListMixin, mixinDevice去掉
  *GlobalLayout.vue将<side-menu标签相关隐藏判断去掉，让左侧菜单一直显示
  *右侧菜单改造：有些后台页面再右侧菜单栏无对应菜单，此时实现不能作隐藏路由，而是也配置菜单然后通过样式隐藏 


****** 改造成鱼泡网项目    end *******

************************前端 end******************************


************************后端 begin******************************

？启动时一直报“Error from chokidar...”错误，对后续的调试热更新是否有影响  
 网上用的解决办法是在终端输入一下命令即可
 echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl 
 ！！应该是在虚拟机内部有限制，在物理机下运行就不会报那个错误。

*online代码生成器生成的模板是在jeecg-boot-module-system\src\main\resources\jeecg\code-template-online，可以自定义
 但是如果是online表单，在线配置的表单页面，它的模板是固定的原始表单不能修改的。 而不是online代码生成器生成的模板，不能自定义

？代码生成时候的包名为什么一直会多一个“demo”，比如增加一个test模块,包名项为cc，生成的org.jeecg.modules.demo.cc.controller.TestController
   代码生成功能相关模板又是在哪里配置
  ！在src/main/resources/jeecg/jeecg_config.properties配置
？生成的代码前端页面更改时不能自动刷新
？以上问题都需要了解代码生成的总体原理，框架结构

*除了在线代码生成还可以运行代码里的GUI进行代码生成：
 1.配置src/main/resources/jeecg/jeecg_config.properties里的project_path（生成代码存放目录）、bussi_package（基础的包名）
 2.运行src/main/java/org/jeecg/JeecgOneGUI.java 其中包名项是在1步骤配置的bussi_package上叠加
 *注意：在线代码生成和GUI的配置都是1步

*代码生成功能使用时，在相关配置完成后要重启前后端项目才能生效
 代码生成功能在配置菜单时注意：
 *一级菜单的组件都是“layouts/RouteView”  
 *【默认跳转地址】是指上一级菜单点击默认跳转的地址，因为上一级菜单底下有多个菜单。
 *【隐藏路由】大概就是该页面不会在左侧菜单列表展示出对应的菜单项。？？待测
 *【聚合路由】大概是说比如A菜单下面有A1，A2子菜单，但是在左侧总菜单只想让A菜单展示，点击A菜单后右侧展示A菜单下的A1，A2的一个聚合页面。这个聚合页面还是会有A1、A2菜单栏

*数据权限
 实现：代码上处理，在线编码。 
 基本使用逻辑：前端或后端在对应的地方做权限埋点，然后在系统中添加权限控制菜单项和给对应角色分配菜单。
 *前端权限控制
  hasPermission.js定义的has指令用于控制页面元素的显隐，和shiro的页面权限标签类似（如admin:addUser)。 详见官方文档 http://doc.jeecg.com/2044038
  比如：页面按钮元素添加这个“admin:addUser”后，在对应的页面的菜单里配置按钮权限时加上“admin:addUser“，最后还要在角色管理里做下授权。
  以上是元素的显隐控制，如果是要是否可用控制则用disableAuth来控制disabed属性，但是菜单按钮权限配置的【授权策略】就要是”可编辑(未授权时禁用)“
 *具体实践（详见官方开发文档）：
  1.通过角色限制访问页面
  2.通过角色限制前端页面dom元素的显隐，如add按钮，并在后端controller验证限制
  3.通过角色限制前端页面数据表格列显隐，后端数据没控制
  4.通过角色限制用户访问数据的范围，基本逻辑是：特地用户是特定角色，特定角色有特定菜单项，特定菜单项有特定的数据范围（即【数据权限规则】）
  5.通过我的部门分配权限？？一个用户可以在其负责的部门（我的部门）里为这个部门添加”部门角色“，并且给这个负责部门下的用户分配”部门角色“，但是这个部门角色的用处是什么。
 *特别注意：
   列权限控制时，在js中的权限标识是除去列名后的部分。 如权限标记是"cny:interesting",则在js里配置的是"cny:"
   注意实际页面访问控制和按钮/数据列等零部件的显隐控制也都是需要添加菜单节点，只是后者添加的是“按钮/权限”类型的菜单权限。
  ”我的部门“实际上就是当前用户在创建时的”负责的部门“选框

*增值规则：其实就是自动生成编码的一种实现。 添加相关接口实现类并在【系统编码规则】添加记录myCodeRule，然后在线代码生成时配置对应表单页面属性的【空间默认值】赋值，如${myCodeRule}


*Copilot是AI代码生成工具，由Github研发出来的，自动代码生成代码。 其实个人理解就是基于github上开源代码进行AI学习，并进行自动化提示
 imgcook是设计图切图代码工具，可以作为插件附加在PS、Sketch上，根据设计图自动生成代码


*jeecg除了在ShiroConfig类里配置免鉴权url，还可以在yml里配置jeecg.shiro.excludeUrl进行配置

*权限注解：
  数据权限通过自定义aop拦截，@PermissionData注解是用于有添加数据规则权限的，而不是普通的菜单权限
  菜单权限通过shiro的各种注解拦截，@RequiresPermissions

*签名拦截器
 为了后端一些管理功能安全性，jeecg对部分的url请求进行拦截做签名验证（通过springmvc的拦截器配置，详见SignAuthConfiguration类）

*获取登录用户
 后端shiro机制（注意：如果请求设置shiro拦截排除则获取不到，可用下一种方式）： LoginUser sysUser = (LoginUser)SecurityUtils.getSubject().getPrincipal();
 后端token机制： String username=org.jeecg.common.system.util.JwtUtil.getUsername(token)；LoginUser sysUser = sysBaseAPI.getUserByName(username);
 前端app机制：store.getters.userInfo

*非springMvc Controller下获取request
  HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();



*用户登录状态管理和授权管理
 &特别注意jeecg只在登录操作的时候去验证刷新token，并没有在每次请求刷新token。 所以登录一阵子后会掉线。这可能是为了token有别于session
 在51CTO博客里有一篇《JWTToken超时刷新策略》就是解析jeecg的用户状态管理机制
 在简书里有一篇《jeecg中的shiro使用》也是解析jeecg的用户状态管理机制
  使用shiro进行管理。 
  1、在shiro的过滤器链上添加了一个JwtFilter过滤器，当有请求里含有token时，则进行shiro的subject.login(token)操作（其实内部回去掉用自定义realm#doGetAuthenticationInfo方法进行认证登入）
  2、在用户访问controller的时候，会经过shiro，shiro会去自定realm#doGetAuthorizationInfo拿权限，即角色和标识等（如：user:add），然后进行鉴权，如果权限不足则返回事先配置好的权限不足url="/sys/common/403"
  3、在权限不足或未登录时会跳转到ShiroConfig配置的"/sys/common/403"，这个url请求其实直接返回了权限不足的json，由前端自己去跳转到自己的登录页面进行登录。 
  4、前端请求登录时，后端登录保存到redis当中，而第1步自定义realm#doGetAuthenticationInfo方法会去SysBaseApiImpl#getUserByName拿用户实体，
       此时特别注意checkUserTokenIsEffect方法里用了2个缓存：
            SysBaseApiImpl#getUserByName方法这里有个缓存注解@Cacheable(cacheNames=CacheConstant.SYS_USERS_CACHE, key="#username")  用spring缓存了用户实体
            jwtTokenRefresh(...)方法里用了redis缓存
   5、token是采用了JwtToken，JwtToken自带了过期时间，然后又放在redis中设置过期时间。 在ShiroRealm#jwtTokenRefresh方法是验证并且刷新token过期时间
        逻辑是：设置token的redis过期时间是JwtToken过期时间的2倍。 当redis未过期（可以获取到token），此时如果JwtToken过期时间已过，则从新签发jwtToken（过期时间也会刷新）和刷新redis过期时间
  *在ShiroConfig里有配置了RedisCacheManager，可以对权限 信息进行缓存 

*jeecg的token存储了username和password的加密信息，通过String username=JwtUtil.getUsername(token)可以获取用户名


*第三方登录逻辑：
  如微信扫码登录逻辑：
     1、用户请求跳转到微信扫码二维码界面并扫码
     2、微信接收到用户扫码同意请求后将用户信息通知到我们服务器接口（redirect_uri参数指定的api）
     3、服务器接口接到用户信息（主要有username、avatar、uuid），分几种情况：
         3.1、用户已注册过SysUser：到sys_third_account表查询sys_user_id再到sys_user表查询sysUser对象，生成token返回给用户
         3.2、用户未注册过SysUser：到sys_third_account表查询sysThirdAccount对象，将uuid返回给前端，让用户补充手机号提交到服务器绑定接口（即/sys/thirdLogin/bindingThirdPhone）。
                绑定接口逻辑：
                      根据手机号查找sys_user表，如果有sysUser则将id写到sys_third_account表，两者相关联，即绑定。生成token返回给前端
                      根据手机号查找sys_user表，如果无sysUser则创建一个初始密码为123456的sysUser用户，也是将id写到sys_third_account表，两者相关联，即绑定。生成token返回给前端

*online表单 begin*
*online表单相关请求Controller在org\jeecgframework\boot\hibernate-re\3.0.02\hibernate-re-3.0.02.jar 下面的 org.jeecg.modules.online.cgform.c.a;
*online表单 end*

*online报表，如果sql过于复杂，点击【sql解析】或报错，没有关系，直接保存，或者用简单sql先解析好字段列再加入复杂sql，再保存。
 如果使用“?column=age&order=desc”进行排序，则age字段必须在报表的显示字段里，否则会报错

*online报表的列表里设置菜单的“数据规则”后，并不生效！！！。
 online表单的列表菜单url里加"?column=age&order=desc”并不生效，但是在数据接口里加是可以生效的，如 '/online/cgform/api/getData/10ff95d27c714aa1a1e69ceba00a0601?_t=1650590918&column=age&order=desc'
 注意：配置的url地址是固定的，不能加其它url参数，锚点也不行
          数据规则的 规则字段填写的是字段的驼峰名称而不是下划线

**//用online报表来请求列表，但是不能添加“数据规则”和各种动态条件参数,适合做复杂查询
   //用online表单来请求列表，可以添加“数据规则”和各种动态条件参数，所以用online表单

*online表单中，部门控件默认存储的是id，如果要存code，可通过扩展参数{"store": "orgCode"}进行设置

*online表单中js增强，不能定义自己的方法，因为每个自定义的方法都要与自定义按钮code相对应。 如果自定义方法没有对应的自定义按钮code与之对应，则会造成全部js不执行

****非常重要：
           需求：要在online的列表使用js增强来实现数据筛选（这样就可以根据不同栏目进行切分菜单）
           技术方案：js增强的list里使用以下代码：
 		created(){
		    that.superQuery.params='[{"rule":"eq","type":"text","val":"A01A04A01","field":"category_code"}]';
 		    that.loadData();
 		}
           注意：1、利用此原理，可以将cms的文章列表按照栏目切分成不同的菜单。 
                     2、配合菜单的数据规则，可以按照角色分配不同栏目的文章数据。
                     3、

*jeecg默认读取上传图片url后在浏览器访问只能是下载，如果需要预览而不是下载，则注释添加以下代码
  //response.setContentType("application/force-download");// 设置强制下载不打开
  //response.addHeader("Content-Disposition", "attachment;fileName=" + new String(file.getName().getBytes("UTF-8"),"iso-8859-1"));
  response.setContentType("image/png;image/jpg;image/git");// 设置不强制下载，可打开预览 cny+


*自定义树强制需要ID列,父ID列,显示列,是否有子节点列 { 例如：id,pid,name,has_child}   
 部门树没有has_child，而且默认存数据库值是id，？online表单设计时如果想要存生成的org_code似乎没什么解决方案



*部门树使用技巧：
 1、通过父id查询子部门参考 “/sys/sysDepart/queryTreeList”实现
 2、通过父id查询子部门（参考“我的部门”“/sys/sysDepart/queryIdTree”）


*高级查询
 场景：根据后台的【高级查询】按钮生成的请求，app可以模拟进行Ajax请求来实现高级查询。
 特别注意： 如果请求的是online表单生成的url，则字段名称要用下划线，如"category_code"，即参数为{"rule":"right_like","type":"text","val":this.$Route.query.categoryCode,"field":"category_code"}
                  如果请求的是代码生成器生成代码安装到项目时的url，则名称要用驼峰命名，"categoryCode"，即参数为{"rule":"right_like","type":"text","val":this.$Route.query.categoryCode,"field":"categoryCode"}
                  以上必须特别注意否则容易出错，特别是代码生成器生成的功能

*数据库备份方案：
   intellij备份：1.备份ddl：右击数据库->SQL Script->Generate DDL to CLipboard->粘贴到文档中保存
                      2.备份数据sql：右击数据库->Export Data to files->选择指定位置保存
   

？定时任务点立即执行可以执行，但是设定了表达式定时却没有真正执行，是为何？
  官方给的回复可能性：定时任务是分布式的，如果多个机器链接同一个数据库，会随机在某个机器上跑任务，所以不是到时间没跑，而是不知道在谁的机器上跑了
  所以后续等完整部署完之后再检查是否真正执行
************************后端 end******************************

https://api.xmtieda.com/jeecg-boot/online/cgform/api/getColumns/6d8e3289002448f2a745d736582379ba?_t=1649752470
*********获取online表单的列表展示列信息（包括对应列所需的字典）************
{"success":true,"message":"","code":0,"result":{"code":"6d8e3289002448f2a745d736582379ba","description":"栏目表","tableType":1,"isDesForm":"N","enhanceJs":null,"desFormCode":"","columns":[{"title":"站点","dataIndex":"site_code","align":"center","customRender":"site_code","scopedSlots":null,"hrefSlotName":null,"showLength":0,"sorter":false,"linkField":null,"tableName":null},{"title":"内容类型","dataIndex":"module_type","align":"center","customRender":"module_type","scopedSlots":null,"hrefSlotName":null,"showLength":0,"sorter":false,"linkField":null,"tableName":null},{"title":"排序号（升序）","dataIndex":"tree_sort","align":"center","customRender":null,"scopedSlots":null,"hrefSlotName":null,"showLength":0,"sorter":false,"linkField":null,"tableName":null},{"title":"栏目名称","dataIndex":"category_name","align":"center","customRender":null,"scopedSlots":null,"hrefSlotName":null,"showLength":0,"sorter":false,"linkField":null,"tableName":null},{"title":"是否在导航中显示","dataIndex":"in_menu","align":"center","customRender":"in_menu","scopedSlots":null,"hrefSlotName":null,"showLength":0,"sorter":false,"linkField":null,"tableName":null},{"title":"内容展现模式","dataIndex":"show_modes","align":"center","customRender":"show_modes","scopedSlots":null,"hrefSlotName":null,"showLength":0,"sorter":false,"linkField":null,"tableName":null}],"currentTableName":"cms_category","paginationFlag":"Y","hasChildrenField":"has_child","fieldHrefSlots":[],"relationType":null,"formTemplate":"2","foreignKeys":[],"dictOptions":{"module_type":[{"value":"0","text":"未定义","title":"未定义"},{"value":"1","text":"文章","title":"文章"},{"value":"2","text":"链接","title":"链接"},{"value":"3","text":"图片","title":"图片"},{"value":"4","text":"视频","title":"视频"},{"value":"5","text":"音频","title":"音频"},{"value":"6","text":"图书","title":"图书"},{"value":"7","text":"下载","title":"下载"}],"in_menu":[{"value":"Y","text":"是","title":"是"},{"value":"N","text":"否","title":"否"}],"site_code":[{"value":"1513328847070572545","text":"铁哒-翔安站","title":"铁哒-翔安站"}],"show_modes":[{"value":"0","text":"自动","title":"自动"},{"value":"1","text":"栏目列表","title":"栏目列表"},{"value":"2","text":"第一条内容","title":"第一条内容"}]},"hideColumns":[],"cgButtonList":[],"checkboxFlag":"Y","textField":"category_name","pidField":"pid","scrollFlag":1},"timestamp":1649752470439}



https://api.xmtieda.com/jeecg-boot/online/cgform/api/getFormItem/6d8e3289002448f2a745d736582379ba?_t=1649752470
*********获取online表单的元数据信息，即在线开发填写的表相关配置************
{"success":true,"message":"","code":0,"result":{"schema":{"$schema":"http://json-schema.org/draft-07/schema#","describe":"栏目表","type":"object","title":"我是一个jsonschema title","required":["sys_org_code","category_code","module_type","category_name"],"properties":{"is_need_audit":{"dbPointLength":0,"view":"switch","fieldExtendJson":"","type":"string","title":"是否需要审核","order":22,"defVal":"Y","extendOption":null},"image":{"dbPointLength":0,"view":"image","fieldExtendJson":"","type":"string","title":"栏目图片","maxLength":255,"order":14},"category_name":{"dbPointLength":0,"view":"text","fieldExtendJson":"","type":"string","title":"栏目名称","maxLength":100,"order":13},"sys_org_code":{"dbPointLength":0,"view":"text","fieldExtendJson":"","type":"string","title":"所属区域","maxLength":1000,"order":6},"keywords":{"dbPointLength":0,"view":"text","fieldExtendJson":"","type":"string","title":"关键字","maxLength":500,"order":18},"category_code":{"dbPointLength":0,"view":"text","fieldExtendJson":"","type":"string","title":"栏目编码","maxLength":300,"order":9,"defVal":"${shop_order_num}"},"module_type":{"dbPointLength":0,"view":"list","dictCode":"cms_article_type","dictTable":"","fieldExtendJson":"","type":"string","title":"内容类型","dictText":"","enum":[{"value":"0","text":"未定义","title":"未定义"},{"value":"1","text":"文章","title":"文章"},{"value":"2","text":"链接","title":"链接"},{"value":"3","text":"图片","title":"图片"},{"value":"4","text":"视频","title":"视频"},{"value":"5","text":"音频","title":"音频"},{"value":"6","text":"图书","title":"图书"},{"value":"7","text":"下载","title":"下载"}],"order":11,"defVal":"1"},"in_menu":{"dbPointLength":0,"view":"switch","fieldExtendJson":"","type":"string","title":"是否在导航中显示","order":19,"defVal":"Y","extendOption":null},"in_list":{"dbPointLength":0,"view":"switch","fieldExtendJson":"","type":"string","title":"是否在分类页中显示列表","order":21,"defVal":"Y","extendOption":null},"description":{"dbPointLength":0,"view":"text","fieldExtendJson":"","type":"string","title":"描述","maxLength":500,"order":17},"pid":{"dbPointLength":0,"hasChildField":"has_child","view":"sel_tree","pidComponent":1,"pidValue":"0","fieldExtendJson":"","dict":"cms_category,category_name,id","type":"string","title":"上级栏目","pidField":"pid","order":7},"site_code":{"dbPointLength":0,"view":"list","dictCode":"id","dictTable":"cms_site","fieldExtendJson":"","type":"string","title":"站点","dictText":"site_name","enum":[{"value":"1513328847070572545","text":"铁哒-翔安站","title":"铁哒-翔安站"}],"order":8},"show_modes":{"dbPointLength":0,"view":"radio","dictCode":"cms_article_show_modes","dictTable":"","fieldExtendJson":"","type":"string","title":"内容展现模式","dictText":"","enum":[{"value":"0","text":"自动","title":"自动"},{"value":"1","text":"栏目列表","title":"栏目列表"},{"value":"2","text":"第一条内容","title":"第一条内容"}],"order":23,"defVal":"0"},"target":{"dbPointLength":0,"view":"text","fieldExtendJson":"","type":"string","title":"链接目标窗口","maxLength":20,"order":16},"tree_sort":{"dbPointLength":0,"view":"number","fieldExtendJson":"","type":"number","title":"排序号（升序）","order":12},"is_can_comment":{"dbPointLength":0,"view":"switch","fieldExtendJson":"","type":"string","title":"是否允许评论","order":20,"defVal":"Y","extendOption":null},"href":{"dbPointLength":0,"view":"text","fieldExtendJson":"","type":"string","title":"链接","maxLength":255,"order":15},"remarks":{"dbPointLength":0,"view":"textarea","fieldExtendJson":"","type":"string","title":"备注信息","maxLength":500,"order":27}},"table":"cms_category"},"head":{"id":"6d8e3289002448f2a745d736582379ba","tableName":"cms_category","tableType":1,"tableVersion":59,"tableTxt":"栏目表","isCheckbox":"Y","isDbSynch":"Y","isPage":"Y","isTree":"Y","idSequence":null,"idType":"UUID","queryMode":"single","relationType":null,"subTableStr":null,"tabOrderNum":null,"treeParentIdField":"pid","treeIdField":"has_child","treeFieldname":"category_name","formCategory":"demo","formTemplate":"2","themeTemplate":"normal","formTemplateMobile":null,"extConfigJson":"{\"reportPrintShow\":0,\"reportPrintUrl\":\"\",\"joinQuery\":0,\"modelFullscreen\":1,\"modalMinWidth\":\"\"}","updateBy":"admin","updateTime":"2022-04-11 17:13:59","createBy":"admin","createTime":"2022-04-11 10:24:00","copyType":0,"copyVersion":null,"physicId":null,"hascopy":null,"scroll":1,"taskId":null,"isDesForm":"N","desFormCode":"","lowAppId":null},"formTemplate":"2"},"timestamp":1649752470476}



https://api.xmtieda.com/jeecg-boot/online/cgform/api/getTreeData/6d8e3289002448f2a745d736582379ba?_t=1649752470&column=id&order=desc&hasQuery=false&pageNo=1&pageSize=10
https://api.xmtieda.com/jeecg-boot/online/cgform/api/getData/10ff95d27c714aa1a1e69ceba00a0601?_t=1649753883&column=id&order=desc&pageNo=1&pageSize=10&superQueryMatchType=and
*********获取online表单的列表的数据列表，即数据库列表数据************
{"success":true,"message":"","code":0,"result":{"total":1,"records":[{"category_name":"体育运动","jeecg_row_key":"1513428985671725058","module_type":"1","tree_sort":1,"in_menu":"N","pid":"0","site_code":"1513328847070572545","has_child":"1","id":"1513428985671725058","show_modes":"0"}]},"timestamp":1649752471056}


https://api.xmtieda.com/jeecg-boot/online/cgform/api/getQueryInfo/6d8e3289002448f2a745d736582379ba?_t=1649752470
{"success":true,"message":"","code":200,"result":[],"timestamp":1649752471114}

？？在online表单中使用填值规则，CmsCategoryCodeRule里并没有自动注入formData，怎么注入？


***有时候启动springboot项目时会出现一些奇怪的问题，可以尝试intellij的maven工具里的刷新按钮，点下就好






============================================= jeecg spring cloud begin ======================================================
**jeecg-boot很多的功能模块并不是用springboot的starter模式，比如一些静态工具类XxxUtil，
   如：MinioUtil的配置是通过springIOC初始化时加载MinioConfig对象从而完成配置参数初始化（如${jeecg.minio.minio_url}），并且初始化MinioUtil的静态参数。
       minioClient实例也是在静态类里自己维护，并未交给springIOC进行维护。
   问题：虽然使用可以正常使用，但会有一些问题存在：
         1、XxxUtil工具类都是位于jeecg-boot-base-core，被作为基础构件被具体项目引用。
         2、XxxUtil工具类实际上是在系统启动后静态加载并且没有统一管理，并未实现按需加载。
         3、XxxUtil工具类及相关类加载有读取配置文件的，则具体项目即使有些工具不用也得写配置，否则没有相关配置则会报错，
   优化：所有的工具类等都转为starter并将所有bean都交由springIOC管理，工具相关依赖还是引入，但是bean加载控制通过@Conditional的派生类俩控制。
         如：具体项目有些工具不使用则不在配置文件里做配置，而通过springboot的@ConditionalOnProperty可以控制有配置才加载bean

*使用archetype生成微服务模块
 官方文档使用以下命令，但是会报错
 mvn archetype:generate ^
   -DgroupId=org.jeecg.modules.erp ^
   -Dmodule=erp^
   -Dmodule-up-first=Erp^
   -DartifactId=jeecg-module-erp ^
   -Dversion=3.4.0^
   -DarchetypeGroupId=org.jeecgframework.archetype ^
   -DarchetypeArtifactId=jeecg-cloud-gen ^
   -DarchetypeVersion=3.4.0
 上述命令的每个命令参数加上""即可：
 mvn archetype:generate "-DgroupId=com.cny.modules.erp"  "-Dmodule=erp" "-Dmodule-up-first=Erp" "-DartifactId=cny-module-erp"  "-Dversion=3.4.0" "-DarchetypeGroupId=org.jeecgframework.archetype"  "-DarchetypeArtifactId=jeecg-cloud-gen" "-DarchetypeVersion=3.4.0" "-DarchetypeCatalog=internal"

*用jeecg archetype生成的微服务模块，包含的功能
 1、biz模块依赖jeecg-boot-base-core，因此有shiro相关的过滤，有需要可再nacos进行过滤排除配置。

？官方文档里说服务保护用的是sentinel，但是在后台【路由网关】配置过滤器是用Hystrix
  3.2+后切换为Sentinel，之前用的是Hystrix

*2022年8月份之前老项目部分目录说明：
 jeecg-cloud-module/jeecg-cloud-system-start 包含了相关服务的调用demo，即消费者。 还有事件总线接受、分布式锁、mq、xxljob的demo。在pom里也引入了院有关的jeecg-boot-module-system模块（系统后台模块）
 jeecg-boot-module-demo 包含了相关测试服务demo，即生产者

*2022年8月份之后新项目部分目录说明：
 2022年8月份之后jeecg做了目录大结构调整：
  1、独立出了通用类+中间件通用工具的jeecg-boot-starter。对于微服务或者单体项目都可以将这个项目的jar引入使用。
  2、独立出了微服务结构形式的后台项目jeecg-boot（使用原github仓库名称），包含：
      jeecg-module-system 微服务结构的system后台，
      jeecg-boot-base-core 核心通用类和工具
      jeecg-server-cloud 是SpringCloud五大组件的相关启动服务，如网关项目。
              jeecg-server-cloud\jeecg-visual是一些非必要的服务，包括监控、流控、任务调度
                        jeecg-server-cloud\jeecg-visual\jeecg-cloud-test里面是微服务相关组件的测试demo，即1点中jeecg-boot-starter里组件的测试demo
      jeecg-module-demo 微服务相关的测试demo	
  3、独立出了后台的前端项目 ant-design-vue-jeecg
  注意（“有个bug”实际上是因为把单体的jeecg-system-start项目作为微服务项目了，应该是要用jeecg-system-cloud-start项目才对）：
       1、：微服务的system项目yml缺少“spring.cloud.nacos.discovery.server-addr”配置，导致路由不能再spring容器初始化时加载到redis缓存。后续gateway项目通过“database”方式加载路由配置时加载不到路由列表。解决方式就是加上上述配置。
       2、但是加了“spring.cloud.nacos.discovery.server-addr”配置后，登录随机图片是不能访问的。访问是403。但是将随机图片url复制到浏览器请求又没错。！网络请求是403，但看console发现是跨域。jeecg官方文档说是在网关中添加path谓词，比如/sys/randomImage/**。（可以本地vue项目做跨域开发代理启动起来，然后进入路由维护页面添加path）
       3、即使通过postman请求来规避跨域（第2点的问题），也会出现404报错。 最后折腾两天，发现yml没配置server.servlet.context-path: /jeecg-boot  。导致了springmvc和shiro的过滤链没有匹配上。 【特别注意！！！】
       
            
            
？单体转微服务的实践的思考
  *jeecg在2022年8月左右将项目的目录做了大的结构调整，使得目录结构更加清晰。

  ？考虑在tieda-after上直接改造微服务，还是另外复制一份jeecg来改造微服务
  ！由于tieda-after是在2022年2月初开始的，这期间jeecg已持续更新升级，所以还是下载新的代码来进行实践。

  ？tieda-after用的jeecg的Version是2.3.5.RELEASE，那么在开发一段时间后，我们又如何同步升级呢？ 
  ！如果不是像2022年8月这种太大的目录结构升级，我们可以采用“git双origin”方案。   详见csdn收藏《一个项目设置两个git地址，并最终实现一次性同时推送到到两个git地址上的方法总结》 
  ！最终优化方案，详见csdn收藏《Github 上面git fork后的代码，如何保持同步更新》：fork完后正常开发，jeecg有更新时再add remote官方远程地址，然后拉取分支来合并

  ？为什么官方文档中有“单体升级为微服务3.4.1+”章节，但是实际上jeecg的源码的Version只到3.4.0

*jeecg微服务的数据库配置里包含${MYSQL-PWD:root}，
 * ${key:default_value} 这种表达方式是通过key来获取value，如果获取不到就使用后面默认值。
 * 在一些直接通过Jar包启动的场景中，可以在启动时手动配置相关参数，如果没有配置，也会自动获取默认值进行启动，
    java -jar -DREDIS_HOST=172.16.0.36 -DREDIS_DB=2 xxx.jar
   在intelliJ里启动时就是配置启动的jvm option 如：-DMYSQL-PWD=Cfcny362331,, -DMYSQL-HOST=39.108.237.61 
 * 使用这种方法也可以获取path中的环境变量如：在path中配置了M2_HOME即可在springboot中使用下面的方式获取相应的值。 如：${M2_HOME}
    如：jeecg-boot\jeecg-server-cloud\jeecg-cloud-nacos\src\main\resources\application.yml

*jeecg的微服务启动相关项目问题
  *启动nacos，限制先配置数据库，详见上述“jeecg微服务的数据库配置里包含${MYSQL-PWD:root}”
  *启动jeecg-system-cloud-start   
    PropertiesComponent
    <property name="dynamic.classpath" value="true" />  
 https://www.cnblogs.com/hujunwei/p/15410184.html


*Nacos作为配置中心时，在管理后台中配置列表项里，有各种语言获取或监听配置的代码。 但nodejs、C++、Shell、Python语言却暂时没有

*gateway的动态路由
  动态路由基本原理：
     gateway提供了RouteDefinitionRepository接口让开发者实现，gateway内部会调用该接口的getRouteDefinitions() 、save()、delete()来更新路由列表。
     gateway有一个路由定义类RouteDefinition，它有一个FilterDefinition类列表字段。 这两个类规约了路由及它包含过滤器。
  动态路由总体实现过程：
     1、gateway项目启动时调用dynamicRouteLoader.refresh(null)；
     2、refresh方法里面加载了nacos或redis上缓存的路由列表（在system项目启动会将路由列表缓存到redis）
     3、调用dynamicRouteService一系列链路方法更新MyInMemoryRouteDefinitionRepository（即RouteDefinitionRepository接口的实现）
     4、gateway内部会调用MyInMemoryRouteDefinitionRepository的getRouteDefinitions() 、save()、delete()来更新路由列表。
     5、在执行完4步后，一般要通过spring的applicationEventPublisher发布进程内消息。此时内部会监听此消息，并把路由列表刷新。
     注意：RouteDefinitionRepository接口里用到了Flux和Mono，是Reactor编程相关知识。
  动态路由里的限流熔断过滤器基本原理：
     详见csdn《SpringCloud Gateway 通过redis实现限流》《SpringCloud RedisRateLimiter原理及演示过程》
     1、system后台【路由网关】新建路由时，路由里可以添加RequestRateLimiter过滤器。
          构建RequestRateLimiter过滤器需以下几个参数：
              key-resolver 指定一个解析器实现类（可用SpEL指定），解析器指定路由根据什么限流 。如jeecg默认可选三种解析器：ipKeyResolver、userKeyResolver、apiKeyResolver分别就是根据ip、用户、api路径限流。
              redis-rate-limiter.replenishRate 指定限流令牌生成速度（单位：个/秒），有坑：不支持设置小数，最少为每秒 1 个
              redis-rate-limiter.burstCapacity 指定令牌桶的容量（单位：个）
              redis-rate-limiter.requestedTokens 指定每次用户请求消耗的令牌数
      2、gateway默认是用RedisRateLimiter作为限流的实现（内部原理是令牌桶+lua脚本），需要引入spring-boot-starter-data-redis-reactive
           RedisRateLimiter是分布式的实现，也可以自己找其它本地的实现
      3、根据上述配置，RequestRateLimiter会用lua脚本定期生成令牌，当用户请求时会去拿令牌（拿不到应该是直接拒绝抛异常）
           lua核心逻辑：local filled_tokens = math.min(capacity, last_tokens+(delta*rate)) //即取令牌桶容量和添加令牌后的令牌数中最小的值。保证令牌桶不会满。


  ？动态路由配置的处理逻辑：
     初始化：JeecgGatewayApplication启动时通过CommandLineRunner#run调用dynamicRouteLoader.refresh(null);
     刷新：？redis监听方式，在RequestRateLimiter第三方组件限流 ？？？有待研究
  ？jeecg后台【系统监控-路由网关】的配置
  ？响应式编程Flux 和 Mono 的知识
 
*gateway流控和token拦截
  ？通过限流来做token拦截，具体逻辑后续研究。-->最终目的是让新生成的erp
  *可以通过http://localhost:9999/erp/hello?token=xxx 来传递token

*jeecg的微服务只在gateway处用sentinel进行限流降级
 在resources\application.yml里将一些控制规则与nacos建立了对应关系。对流控规则、降级规则、系统规则、授权规则、热点参数、网关流控规则、API流控规则
 也就是说：具体的控制规则是在Nacos或sentinel管理后台配置。  但sentinel的管理后台更可视化

*如果微服务模块配置了独立数据源，那么每个服务对应的数据库也必须有sys_log这张表。

*分布式事务seata
 Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式。主流的是用AT模式
 原理：
 seata相关数据库表：
         branch_table：
         global_table：
         lock_table：

？微服务之间调用
   无权限验证： 直接调用
   有权限验证：？怎么将token带过去 假设A服务调用B服务，B服务需要鉴权
         jeecg处理方式： 用UserTokenContext.setToken(mytoken);和UserTokenContext.remove();夹住微服务调用代码。（原理详见源码）
                       原理：jeecg-boot-starter\jeecg-boot-starter-cloud\src\main\java\org\jeecg\config\FeignConfig.java作为Feign客户端公共配置
                                依次判断A当前请求头或UserTokenContext里，有无token，有则添加到Feign客户端的requestTemplate.header上面，发送到B服务端
                                因为jeecg已经将token都放在了请求头里了，所以有则有，没有则没有。
    
？消息总线

？jeecg微服务启动访问system项目出现“Vue2路由菜单表....”问题提示，可用官方方案解决：http://doc.jeecg.com/3075165
 
============================================= jeecg spring cloud end ========================================================

*** 接兼职猫的设想 ***
*实践PC扫码登录、小程序公众号登录
*短信等第三方接口
*实践ES搜索引擎
*为自己的产品做铺垫实践
*微信和支付宝相关支付接口