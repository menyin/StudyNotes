*使用git时，尽量将项目的文件编码改为utf-8，以避免使用git过程中出现乱码的情况

*常用命令
 git add --help打开 git add的帮助文档
 cd f:/进入f盘
 git int 生成空的本地仓库
 git add 
 git status 用于查看git的状态
 git rm 文件名   删除工作区里的文件 并提交到暂存区
 git rm --cache 文件名   仅删除暂存区里的文件,比如在add了target目录，此时工作区的target目录不想删除但是暂存区的要删除，
                就可以用到此命令：git rm -rf --cached 其中-rf是递归，删除目录需要用这个参数
 git checkout 文件名  从暂存区将文件恢复到工作区，若工作区已有改文件，则会选择覆盖，也就是说如果本地文件有内容没有add到暂存区，此时会被暂存区的覆盖。
 git checkout 分支名 文件名   从分支中拉取文件，并覆盖工作区里的文件。 和上一个命令的区别在于这个命令再工作区里的文件被我们删除后，此命令执行不会报错。
 git checkout -b dev创建并切换到dev分支
 git fetch origin branch1:branch2 使用远程branch1分支在本地创建branch2(但不会切换到该分支)。详见博客园收藏《git fetch, git pull 以及 FETCH_HEAD》
 git fetch origin branch1 使用远程branch1分支更新本地分支
 git mergin origin/master 将远程的master分支合并到本地当前分支，应该也可以使用git merge FETCH_HEAD
 git diff master origin/master 对比本地master分支和远程仓库的master分支的区别
 git commit -m '注释'  提交所有暂存区的文件
 git commit 文件名 -m '注释' 提交暂存区指定文件
 git clone -b 分支名 仓库地址  克隆指定分支的仓库
 git push 推送本地版本库到线上，只要没有commit的文件都不会被推送。

*一般实践：
 1.本地可以新建仓库然后会自动创建一个master分支：创建一个文件夹，然后git init
 2.将本地分支和线上仓库的master分支相关联：git remote add origin 远程仓库地址
 3.从线上仓库的master分支拉取代码： git pull origin master

*origin是指远程的代码仓库，是指自己的那个代码仓库，如果别人fork我的代码仓库A则他自己会有一个对应的a仓库，然后他用a仓库clone下来本地后，origin就指向a

*在push之前一定要fetch+merge  
*在各个命令操作前可以用git status命令查看下装
*当冲突解决后要commit时只能commit全部，而不能单独文件commit。可以加i参数，如git commit test.txt -i -m '注释'


*开启一个端口：
 firewall-cmd --zone=public --add-port=80/tcp --permanent   （--permanent永久生效，没有此参数重启后失效）
 firewall-cmd --reload

*已经做了gitlab+jenkins部署实践，gitlab部署在250，jenkins部署在240

*git的项目不能设置某个目录的访问权限，这是由其分布式特性决定的。 
 如果要达到这个目的，可以将各个目录做为单独的项目仓库，然后设置权限。

*gitlab 在qq成功开启POP3/SMTP服务,在第三方客户端登录时，密码框请输入以下授权码：  dbylasskltmhbfga
 按照腾讯课堂教程配置后，需要gitlab-ctl reconfigure 下再用命令测试是否成功：
 gitlab-rails console         进入控制台，这个命令也是比较慢的
 Notify.test_email('845257580@qq.com','mytitle','hello').deliver_now   发送邮件

 使用该邮箱作为服务 账号：'3331866906@qq.com'    密码：ganktlwtcuwwcjdf

*线上远程仓库有几个分支和本地有几个分支，但是一般本地的分支和远程仓库的分支都是一一对应的。

*gitlab分支保护可以设置【允许merge】、【允许push】。一般设置：
 master分支只有Masters角色才能【允许merge】、【允许push】
 test分支只有Masters角色才能【允许merge】，Developers和Masters角色都能【允许push】

*GitLab+Jenkins自动持续集成大概流程：
 本地代码提交Gitlab服务器，
 Gitlab钩子触发通知到Jenkins，
 Jenkins到Gitlab上拉取代码进行构建，
 Jenkins将构建的包通过shell脚本在目标服务器上进行部署

*实践安装gitlab过程中发现汉化和运行过程中会出现502或卡顿现象，通过加大虚拟机VMware内存和cpu配置就可以了。
*咕泡jams老师推荐gitlab安装教程 http://bbs.gupaoedu.com/forum.php?mod=viewthread&tid=258&extra=page%3D1
*gitlab机器是250，管理员用户名密码 root 123456789
*Jenkins机器是240，管理员用户名密码 admin 123456 全名也是admin

*jenkins+gitlab持续集成，测试环境可以直接在jenkins上安装tomcat，而线上环境可走正规的maven构建远程部署
 *安装Jenkins时注意不要用服务器的root用户去安装  尽量使用别的用户，否则到时候Jenkins在操作服务器时会有权限问题。
 *jenkins安装教程 https://www.cnblogs.com/c9999/p/6399367.html   
 *maven安装教程 https://www.cnblogs.com/HendSame-JMZ/p/6122188.html
 *Jenkins+gitlab手动构建教程 https://www.cnblogs.com/reblue520/p/7130914.html
 *Jenkins+gitlab自动构建教程 https://www.jianshu.com/p/eeb15a408d88
 *Jenkins+gitlab自动构建部署maven项目教程https://www.cnblogs.com/xuxiaojian/p/9079132.html
  注意：*填写clean package  -Dmaven.test.skip=true命令时，改成以下命令
        org.apache.maven.plugins:maven-clean-plugin:clean package  -Dmaven.test.skip=true
        *填写构建后的动作时，
        【WAR/EAR files】是指jenkins所在工作空间里当前maven项目编译的war包路径
        【Context path】是指发布到远程主机tomcat/webapps下的目录
        【Credentials】是tomcat设置远程部署时的账号密码，注意设置tomcat-users.xml的权限设置
 *Jenkins+gitlab自动构建部署文件到远程服务器可参考以下文档进行 （猜测用publish over ftp插件也能实现）
  总体流程 http://blog.51cto.com/xiong51/2091739
  ssh秘钥配置注意： https://blog.csdn.net/u010947098/article/details/61922969
  ssh秘钥生成使用原理看https://blog.csdn.net/lynnyq/article/details/79109992
  注意：
    秘钥是在web服务器对应的用户目录下生成
    jenkins配置构建后操作【Source files】不用加/     而【Exec command】可以不写脚本或写些tomcat重启、旧版本归档等脚本
    搭建测试web环境时，将tomcat和jenkins放在同一台服务器上，然后单独设置任务的工作空间（不是设置整个jenkins的）https://blog.csdn.net/eleven521/article/details/22277053

*部署Tomcat时，如果使用8080端口并且已经开启防火墙了，但还是被拒绝访问，可以查看logs/catalina.out文件里看有没有报错信息输出


*echo $JAVA_HOME 输出javaHome的目录

*gitlab的地址 http://192.168.1.29:9090/        root   123456789

*gitlab使用过程中的问题：
 项目不能设置某个目录的访问权限，所以像597要做到目录权限只能将目录拆分为git项目仓库
 developer角色不能push主分支，即master分支。但其它分支可以。这个可以在分支保护里设置
 不能设置某成员只能clone某分支的代码

*git本地全局用户名配置GitHub的menyin账户，而使用sshkey提交到gitlab时显示的是menyin提交。
 在生成sshkey时，要加上-C '邮箱'，以识别当前用户。
 其实就是多git账户问题，如自己有GitHub和Gitlab账户。详见 https://www.cnblogs.com/fanbi/p/7825746.html

*597如果用gitlab+jenkins做源码版本管理和持续集成的可行方案：
 *所有源码目录还是保持原样在192.168.1.10上，做目录权限控制
 *每个源码目录在gitlab上新建一个项目仓库，并设置成员权限，包括访问权限和行为权限
 *每个源码目录都对应gitlab上一个项目仓库，用.git初始化项目仓库。注意尽量在10机子上操作初始化
 *每个成员都有自己的git账号，去操作192.168.1.10上的源码，谁最后push，gitlab就认为谁push
 *以上步骤可以保持以前的测试环境，实时查看代码修改结果
 *当需要上线功能，开发人员将相关源码push至gitlab的test分支，并在gitlab提交merge request给管理员
 *管理员收到merge request后，进行审核，确认，合并到master主分支，并触发持续集成钩子
 *jenkins持续集成钩子，拉取相关项目（目录）代码往线上服务器部署

？如果有些代码暂时不想push到远程仓库，此时没有add+commit是会导致在fetch线上的仓库有出问题。
 如果要达到这样的需求，可尝试解决方案：
 1.可以在本地开一个devLocal分支，这样本地就有master和devLocal分支。
 master分支对应线上仓库master分支，而本地分支只是作为一个暂时存储代码的分支。
 当有些代码不提交，可以做本地分支部分合并？？？？具体实践该设想，不知是否能成功。
 2.直接将不提交的文件拷贝备份，然后再fetch，merge让线上的覆盖掉本地的这些不push的文件。 当要push时再将备份文件拷贝到本地仓库中覆盖。

？如果两个人同样是使用master分支，则当

？fetch-merge时怎么查看有多少文件有冲突  *用命令git diff --name-only --diff-filter=U
？能不能选择性的fetch某些文件

？？gitlab的行为权限角色能否自定义，现在只有4种
？？如何开辟分支，使得当前项目的owner能操作主分支，而master只能操作开发分支
？？明天搭建正式环境，测试test分支请求合并到master分支
？？明天测试git配置多账号 有github和gitlab账号  应该如何区分配置https://www.cnblogs.com/fanbi/p/7825746.html


