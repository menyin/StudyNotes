######## mysql begin ##########
# mysql部署详见csdn《【云原生--K8S】 yaml文件部署Mysql数据库（一）》、《【云原生--K8S】 yaml文件部署Mysql数据库（二）》
# https://blog.csdn.net/dreamflyly/article/details/128342955、https://blog.csdn.net/dreamflyly/article/details/128681956
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 1Gi
  storageClassName: manual          #具有特定类别的PV只能与请求了该类别的PVC进行绑定，即PVC和PV通过指定这个类别名来绑定关联
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual          #具有特定类别的PV只能与请求了该类别的PVC进行绑定，即PVC和PV通过指定这个类别名来绑定关联
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---

apiVersion: apps/v1                 #版本
kind: Deployment                    #创建资源的类型
metadata:                           #资源的元数据
  name: jeecg-mysql-dep             #资源的名称，是元数据必填项
spec:                               #期望状态
  replicas: 1                       #创建的副本数量（pod数量），不填默认为1
  selector:                         #
    matchLabels:
      app: jeecg-mysql-pod
  template:                         #定义pod的模板
    metadata:                       #pod的元数据
      labels:                       #labels标签，必填一个
        app: jeecg-mysql-pod
    spec:                           #pod的期望状态
      containers:                   #容器
        - name: jeecg-mysql           #容器名称
          image: registry.cn-hangzhou.aliyuncs.com/namespace-cny/jeecg-mysql:1.0     #镜像
          imagePullPolicy: IfNotPresent
          ports:                      #容器的端口
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "root"
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
---
apiVersion: v1                      #版本
kind: Service                       #创建资源的类型
metadata:                           #资源的元数据
  name: jeecg-mysql-svc                   #资源的名称，是元数据必填项
  labels:                           #labels标签
    app: jeecg-mysql-svc
spec:                               #期望状态
  type: NodePort                    #服务类型
  ports:                            #端口
    - port: 3306
      targetPort: 3306              #与containerPort一样
      protocol: TCP
      nodePort: 3306                #指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配。注:需要更改默认端口范围，详见csdn《k8s 更改NodePort默认端口范围》
  selector:
    app: jeecg-mysql-pod


---
######## mysql end ##########


######## redis begin ##########

apiVersion: v1
kind: Namespace
metadata:
  name: database

---
#注意：pvc一般是开发者配置，pv则是存储管理员配置管理，此处配置到一起为了方便
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv
  namespace: database
spec:
  capacity:
    storage: 30Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: redis-nfs
  nfs:
    path: /data/nfs/redis
    server: 192.168.8.28
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 30Gi
  storageClassName: redis-nfs

---
#如果redis需要设置密码，可以在redis.conf下加  requirepass 123456 配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis
  namespace: database
data:
  redis.conf: |+
    protected-mode no
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    always-show-logo yes
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    slave-serve-stale-data yes
    slave-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    repl-disable-tcp-nodelay no
    slave-priority 100
    lazyfree-lazy-eviction no
    lazyfree-lazy-expire no
    lazyfree-lazy-server-del no
    slave-lazy-flush no
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble no
    lua-time-limit 5000
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    latency-monitor-threshold 0
    notify-keyspace-events Ex
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    activerehashing yes
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit slave 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    hz 10
    aof-rewrite-incremental-fsync yes
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: database
  labels:
    app: redis
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:5.0
          imagePullPolicy: Always
          command: ["redis-server","/etc/redis/redis.conf"]
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-config
              mountPath: /etc/redis/redis.conf
              subPath: redis.conf
            - name: redis-persistent-storage
              mountPath: /data
      volumes:
        - name: redis-config
          configMap:
            name: redis
            items:
              - key: redis.conf
                path: redis.conf
        - name: redis-persistent-storage
          persistentVolumeClaim:
            claimName: redis-pvc

---
kind: Service
apiVersion: v1
metadata:
  name: redis
  namespace: database
spec:
  type: NodePort
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
      nodePort: 6379

######## redis end ##########

---

######## nacos begin ##########

apiVersion: v1
kind: Namespace
metadata:
  name: config-center

---
#?ReplicaSet可以直接对外暴露服务吗
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: jeecg-nacos
  namespace: config-center
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jeecg-nacos-pod
  template:
    metadata:
      labels:
        app: jeecg-nacos-pod
    spec:
      containers:
        - name: jeecg-nacos
          image: registry.cn-hangzhou.aliyuncs.com/namespace-cny/jeecg-nacos:7.0
          ports: # 设置容器暴露的端口列表
            - name: nacos-port
              containerPort: 8848
#              hostPort: 8848
          env: # 设置环境变量列表
            - name: "MYSQL-HOST"
              value: "192.168.8.30"

---

apiVersion: v1
kind: Service
metadata:
  name: nacos-svc
  namespace: config-center
spec:
  selector:
    app: jeecg-nacos-pod
  type: NodePort # service类型
  ports:
    - port: 8848
      nodePort: 8848 # 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配
      targetPort: 8848

######## nacos end ##########

---
######## system begin ##########

apiVersion: v1
kind: Namespace
metadata:
  name: system

---
#?ReplicaSet可以直接对外暴露服务吗
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: jeecg-system
  namespace: system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jeecg-system-pod
  template:
    metadata:
      labels:
        app: jeecg-system-pod
    spec:
      hostAliases:
        - hostnames: [ "jeecg-boot-nacos","jeecg-boot-redis","jeecg-boot-mysql" ]
          ip: "192.168.8.30"
      containers:
        - name: jeecg-system
          image: registry.cn-hangzhou.aliyuncs.com/namespace-cny/jeecg-system:7.0
          ports: # 设置容器暴露的端口列表
            - name: system-port
              containerPort: 7001
          #              hostPort: 7001


---
apiVersion: v1
kind: Service
metadata:
  name: system-svc
  namespace: system
spec:
  selector:
    app: jeecg-system-pod
  type: NodePort # service类型
  ports:
    - port: 7001
      nodePort: 7001 # 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配
      targetPort: 7001

######## system end ##########
---

######## gateway begin ##########

apiVersion: v1
kind: Namespace
metadata:
  name: gateway

---
#?ReplicaSet可以直接对外暴露服务吗
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: jeecg-gateway
  namespace: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jeecg-gateway-pod
  template:
    metadata:
      labels:
        app: jeecg-gateway-pod
    spec:
      hostAliases:
        - hostnames: [ "jeecg-boot-nacos","jeecg-boot-redis" ]
          ip: "192.168.8.30"
      containers:
        - name: jeecg-gateway
          image: registry.cn-hangzhou.aliyuncs.com/namespace-cny/jeecg-gateway:5.0
          ports: # 设置容器暴露的端口列表
            - name: gateway-port
              containerPort: 9999
          #              hostPort: 9999


---
apiVersion: v1
kind: Service
metadata:
  name: gateway-svc
  namespace: gateway
spec:
  selector:
    app: jeecg-gateway-pod
  type: NodePort # service类型
  ports:
    - port: 9999
      nodePort: 9999 # 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配
      targetPort: 9999

######## gateway end ##########

---

######## ui begin ##########

apiVersion: v1
kind: Namespace
metadata:
  name: ui

---
#?ReplicaSet可以直接对外暴露服务吗
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: jeecg-ui
  namespace: ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jeecg-ui-pod
  template:
    metadata:
      labels:
        app: jeecg-ui-pod
    spec:
      hostAliases:
        - hostnames: [ "jeecg-boot-gateway","jeecg-boot-system"]
          ip: "192.168.8.31"
      containers:
        - name: jeecg-ui
          image: registry.cn-hangzhou.aliyuncs.com/namespace-cny/jeecg-ui:4.0
          ports: # 设置容器暴露的端口列表
            - name: ui-port
              containerPort: 80
          #              hostPort: 80
          volumeMounts:
            - name: ui-html
              mountPath: /var/www/html
      volumes:
        - name: ui-html
          hostPath:
            path: /var/jeecg-ui/www/html
            type: DirectoryOrCreate  # 目录存在就使用，不存在就先创建后使用

---
apiVersion: v1
kind: Service
metadata:
  name: ui-svc
  namespace: ui
spec:
  selector:
    app: jeecg-ui-pod
  type: NodePort # service类型
  ports:
    - port: 8080
      nodePort: 8080 # 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配
      targetPort: 80

######## ui end ##########

---



