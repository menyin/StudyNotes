
*shiro权限框架 ppt教案详见百度文库收藏《Shiro安全登录框架学习》　github项目地址 https://github.com/apache/shiro/tree/shiro-root-1.3.2/
 3大核心API，三者是相互关联的：
     Subject 主体，即当前“用户”，不一定是真实的用户
     SecurityManager 处理的管理器，类似SpringMVC核心过滤器
     Realm 相当于数据源，用于获取用户，角色，权限等安全数据信息。
 spring-context-shiro.xml里相关节点说明：
    filterChainDefinitions 相关路由访问的权限配置，专业词叫"过滤链"，配置哪些可访问哪些不能访问。形如："路径 = 拦截器名"。路径使用的是Ant路径通配符。anon代表匿名访客无需认证，authc需认证,logout ,user
    loginUrl 配置的是不需要验证权限的路由
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">节点的id要等于web.xml里的shiro过滤器的名称。应用容器会去spring-context-shiro.xml找与该过滤器名称相同的bean
 web.xml里的DelegatingFilterProxy用于做权限控制的入口，这里默认是寻找与该过滤器名相同的spring bean，也可以额外配置。它也可以指向其它的spring bean，这里的bean可以是其它权限控制框架的bean
 Ant路径通配符
    ? 表一个字符 如/admin?   可以匹配/admin1
    * 表零个或多个字符串 如/admin/*   可以匹配/admin/a 不能匹配/admin/a/b
    ** 表零个或多个路径 如/admin/**   可以匹配/admin/a 、/admin/b、/admin/a/b.....   这个非常重要
 shiro过滤器
    认证过滤器
       aono 匿名过滤器，任何人访问
       authc 用户认证后可访问
       user  rememberMe用户可访问
    授权过滤器
       perms 基于资源的授权过滤器
       roles 基于角色的授权过滤器
    退出过滤器
       logout  如/logout=logout
  shiro.ini里可以配置
   [main]部分 securityManager.realm即realm实例，perms.unauthorizedUrl资源未授权跳转页面，roles.unauthorizedUrl角色未授权跳转页面，
   [urls]部分 主要配置指定url对应的过滤器
 过滤链的匹配顺序：按书写顺序从依次匹配，写在前面的优先匹配。
 realm 用于获取安全数据，如到数据库中获取用户名密码，权限等。通过自定义继承AuthorizingRealm的类SystemAuthorizingRealm，里面重写相关方法来完成安全数据的交互。SystemAuthorizingRealm会被配置到spring的bean中
 UsernamePasswordToken用于用户输入的登录用户名密码信息，SimpleAuthenticationInfo用于封装从数据库查询出来的用户信息，其3个构造参数分别表回传给subject的参数（通过subject.getPrincipal()获取）、密码、realm名称（多个realm时指定，如多个用户表情况下）
 注意：shiro登录过一次后，会记住当前登录状态，如果再次通过同样的用户名做登录表单提交，即使密码错误，它也依然会显示登录成功。这是因为shiro缓存机制决定的。可通过shiro"/logout"退出路由配置解决

*代码 Object principal = subject.getPrincipal();//获取cn.sm1234.realms.MyRealm.doGetAuthenticationInfo()里返回值SimpleAuthenticationInfo实例的第一个构造参数：principal

*MyRealm#doGetAuthorizationInfo 该方法其实是返回对象里其实是携带者一些授权码的信息，shiro会根据这些授权码信息去处理subject授权的相关方法逻辑

*RBAC 基于角色的权限访问控制

*shiro的几个功能点：
 权限控制分配
 权限缓存：每次请求资源都要经过realm里面请求数据库授权，这时候就可以通过ehcache进行缓存，就不用每次通过realm。一般在用户正常或非正常退出自动清空缓存。手动清空则一般是修改了用户权限后进行的。
 remenberme
 密码加密：支持MD5和SHA方式。要求通过shiro提供的加密工具，在用户注册时将密码进行加密存储到数据库。然后再跟进规范配置使得请求认证时能进行加密后的密码匹配

*shiro权限相关表设计
  t_user ： id、name、password
  t_role ： id、name、permission(角色权限标记，shiro需要用)
  t_permission : id、name、permission(varchar权限标记符)
  t_user_role ：user_id
  t_role_permission ：user_id、role_id

*powerdesiger的物理模型下新建一个表作为两个表的中间表时，要将中间表的字段分别设置成两表的外键，可以在拉出的关联线中的"join"设置

*shiro和普通web整合时是通过一个监听器+一个ini文件，而shiro和spring整合是通过过滤器

*在shiro与ssm整合实践（mavenweb0）中，我并没有使用教程中mybatis及mybatis-spring版本  而是使用传智scm项目中是版本

*权限不足跳转页面是通过捕获权限过滤异常方式实现，在Spring-Shiro中Shiro的<property name="unauthorizedUrl" value="/main/unAuth"/>配置的无效，
需要另外做异常配置 <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">才能生效

*如何实现将贴有权限注解的权限表达式都收集起来存储在数据库呢？
 教程做法是写一个功能，在其处理的controller里利用SpringMvc注入RequestMappingHandleMapping类实例进行获取所有controller上的权限标签并保持数据库
 通过 @RequiresPermissions("employee:list")和@PermissionName("员工列表")两个标签可以存储权限表达式和权限名称

*在项目的具体Realm实例里做授权实现时，在给返回值AuthorizationInfo实例添加权限表达式时，可添加*等通配符，
 如 permissions.add("*:*"); info.addStringPermissions(permissions);

*shiro几个常用的jsp的tabs标签
 <shiro:principal property="username"></shiro:principal>用于获取用户信息，如用户名
 <a href="/logout">注销</a>该功能需要在spring-shiro.xml里配置退出过滤器，请求的是退出过滤器，可以实现退出功能。
 <shiro:hasPermission name="employee:list"></shiro:hasPermission> 判断是否有权限
 <shiro:hasRole name="xxxx"></shiro:hasRole> 判断是否有角色

？在jeesite里web.xml里并没有配置org.apache.shiro.web.env.EnvironmentLoaderListener监听器是为何？  该监听器会加载shiro.ini

？RemenberMe如何使用，实践失败
？权限注解如何配置使用，实践失败
