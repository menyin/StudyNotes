**团队协作：https://www.cnblogs.com/yhaing/p/8473746.html

*使用git时，尽量将项目的文件编码改为utf-8，以避免使用git过程中出现乱码的情况

*使用git log 或gitdiff等查看版本对比信息时，进入信息对比界面。 用shift+q可以退出

**git工作区和暂存区在多个本地版本库之间可以理解为公用的，当a分支库和b分支库最初版本是一致的情况下，a版本状态下修改并未commit的内容其实是在工作区或暂存区。
 此时切换到b分支不会报错，因为a b分支最初版本状态一致。 而如果a b分支最初版本状态就不一致时则这个场景下会出现报错。因为最初状态一致时，a修改未提交的内容
 在切换到b时，git知道把这部分修改的内容添加到b的哪个位置。而如果a b分支最初版本不一致时，a修改未提交的内容在切换到b时，git并不知道将这部分修改的内容放在
 哪里，又不能把修改内容丢弃，所以只能报错强行要求开发人员提交掉。
 注意：所以在两个最初版本一致的两个分支，修改的内容并且未提交时去切换分支会可能造成内容提交非期望的分支上。所以尽量做完的内容一定要提交到当前分支。切记~

*git在本地init后是个空的项目，此时没有分支，只要有了文件并且有commit后则会自动创建一个master，如果没有文件则其实没有分支，用git branch是创建不了分支的。
 
**origin是指远程的代码仓库，是指自己的那个代码仓库，如果别人fork我的代码仓库A则他自己会有一个对应的a仓库，然后他用a仓库clone下来本地后，origin就指向a
 最好是直接git clone仓库 在做分支pull，如果先git init后再直接pull test分支，而不是pull master分支，则本地的master分支会下载到的是线上test分支。
 此时如果master修改提交后用【git push】命令不能提交，一般人会直接用【git push origin master】则是提交到线上的master分支， 这个是个坑。
 此时本地master和test其实都对应线上的test分支，如果本地test分支提交push到线上test分支则本地master分支再提交到线上的test分支就回被拒绝，push线上master分支也一样。
 原因：https://blog.csdn.net/zuofanxiu/article/details/82598029

*其实如果是git init并且用git fetch origin cny:cny方式只能检出cny与origin/cny  其它master分支是没有检出的，此时用git branch -a就可以发现只有cny和origin/cny两个分支
 而如果你用git fetch一下 就会检出所有的分支。或者直接用git clone url 也会把所有的线上线下的分支全部检出。此时用git branch -a就会全部显示

*合并分支原理：
 首先用git clone载下来的项目，git会在.git目录里保存线上线下的所有分支的版本信息。 如果用git init +git fetch cny:cny或git init+git check -t origin/cny就只能保存cny分支信息
 其次要让一个分支，如test分支与cny分支合并，就必须保证test分支再本地有被载下来并且是最新的，这样冲突解决后提交到cny分支并push到线上cny分支就不会有问题。此时线上cny和线上test在线上合并不会有问题
 再次被合并的test分支要保证本地有最新的版本信息就必须在它与cny分支合并前先git fetch test，否则老的本地test分支与本地cny合并，cny push到线上，线上cny与线上test在线上合并依然会冲突。
 所以按照郭总的git使用流程，我做了优化：本地只需要在合并前去git fetch origin test 而不用git fetch origin test:test 后者是利用线上的test再更新或创建本地的test。 因为我们只需合并用，所以就只fetch线上test即可。
 *其实一般本地会有线上线下所有版本

*冲突：
 在线上线下合并时候引起的冲突，就要在自己线下下载对最新的线上目标版本与自己本地的版本合并，然后push自己线上版本再去合并
 在线下版本push到线上时引起的冲突，就要git fetch线上自己最新版本到本地的线上版本，然后本地版本与本地线上版本合并就会有冲突标记，然后解决后push上去即可。

***总的来说就是一个分支，如cny，他有线上的分支，本地分支，本地的线上分支副本，一共有3个分支。

*解决项目目录和文件名中有中文乱码
 在 Git Bash 中使用以下命令设置来支持 UTF-8 编码。
 git config --global core.quotepath false          # 显示 status 编码
 git config --global gui.encoding utf-8            # 图形界面编码
 git config --global i18n.commit.encoding utf-8    # 提交说明编码
 git config --global i18n.logoutputencoding utf-8  # 输出 log 编码

*常用命令(详见《git参考手册》http://gitref.justjavac.com/)
 start . 打开当前目录Windows资源管理器
 git add --help打开 git add的帮助文档
 cd f:/进入f盘
 git int 生成空的本地仓库
 git add 
 git status 用于查看git的状态
 git rm 文件名   删除工作区里的文件 并提交到暂存区
 git rm --cache 文件名   仅删除暂存区里的文件,比如在add了target目录，此时工作区的target目录不想删除但是暂存区的要删除，
                就可以用到此命令：git rm -rf --cached 其中-rf是递归，删除目录需要用这个参数
 git checkout 文件名  从暂存区将文件恢复到工作区，若工作区已有改文件，则会选择覆盖，也就是说如果本地文件有内容没有add到暂存区，此时会被暂存区的覆盖。
 git checkout 分支名 文件名   从分支中拉取文件，并覆盖工作区里的文件。 和上一个命令的区别在于这个命令再工作区里的文件被我们删除后，此命令执行不会报错。
 git checkout -b dev创建并切换到dev分支
 git fetch origin branch1:branch2 使用远程branch1分支在本地创建branch2(但不会切换到该分支)。详见博客园收藏《git fetch, git pull 以及 FETCH_HEAD》
 git fetch origin branch1 使用远程branch1分支更新本地分支
 git merge origin/master 将远程的master分支合并到本地当前分支，应该也可以使用git merge FETCH_HEAD
 git diff master origin/master 对比本地master分支和远程仓库的master分支的区别
 git commit -m '注释'  提交所有暂存区的文件
 git commit 文件名 -m '注释' 提交暂存区指定文件
 git clone -b 分支名 仓库地址  克隆指定分支的仓库
 git push 推送本地版本库到线上，只要没有commit的文件都不会被推送。
 git checkout -t origin/cny 检出远程cny分支并在本地创建一个同名分支与之关联。
 git checkout cny 如果用git branch -a 可以查看到origin/cny分支的话，则此命令是直接检出origin/cny来创建本地分支cny
 git tag v1.1.0 给当前分支当前版本打上tag后，只能在本地用git tag查看到所有tag。  本地版本库push到线上时默认不push tag。如果要push tag请用：
 git push origin --tags

*注意：普通git commint命令是可以带文件名的，但是在解决冲突后并且合并分支后执行git commit是不能带文件名的，否则报错

*tag的理解：tag是给每次的commitid取一个别名，不管在哪个分支下，用git tag命令都能看到所有的tag列表。而不是只看到当前分支下的commitid的tag。
  tag的使用：git tag -a v1.0.0 -m '版本说明v1.0.0'  //打tag，则这个tag会和当前分支最近的一次commit相关联
                   git push origin --tags  //将tag推送到线上，否则线上是看不到新创建的tag

*在拉取远程非master分支（如cny分支）时候，不要有pull，它会覆盖master分支和cny分支。
 可以用git fetch origin cny:cny 或git checkout -t origin/cny
 ！经测试，当前分支为非master，使用git pull   此时只是fetch了最新的本地对应的远程分支，如origin/master。并没有进行自动合并

*几个常用命令注意区分
 *git fetch 更新所有分支到本地
  git fetch origin test:test 是fetch远程的test分支到本地并创建本地同名分支，此时本地有两个分支：test和origin/test
  git fetch origin test 只fetch远程的test分支到本地，即更新本地的origin/test分支
 *git push <远程主机名> <本地分支名>:<远程分支名>
  git push origin test 表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建
  git push origin 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略

*权限管理通过两方面完成：
1.通过角色来分配基本的权限
2.通过branch保护，来限制分支被push或merge


*一般实践：
 1.本地可以新建仓库然后会自动创建一个master分支：创建一个文件夹，然后git init
 2.将本地分支和线上仓库的master分支相关联：git remote add origin 远程仓库地址
 3.（应该是用checkout到本地吧，带实践）从线上仓库的master分支拉取代码： git pull origin master 

*每次要进行合并或者push前先做fetch或pull（pull=fetch+merge）

*团队和做最佳实践
 1、master分支设置分支保护（开发人员不能push，只能管理员），dev分支从master分支checkout出来并且不设置分支保护
 2、开发人员各自在本地git fetch origin（这个命令是拉去远程所有分支）或者Gitclone项目，此时本地会包含本地master、dev，还有对应远程分支的副本origin/master和origin/dev （注意fetch完远程分支如origin/master 要合并本地分支master，才能使用git push origin master进行推送）
 3、开发人员可在本地的dev分支进行开发，开发完成后push到对应的线上dev分支。此时如果线上dev分支已被更改，版本更新，则通过git pull origin dev来fetch和merge线上最新dev分支。通过解决冲突再次push
 4、由于线上master分支是受保护，不能被开发人员push，开发人员只能将自己的代码push到线上dev分支，并在GitHub上填写pull request单通知到管理员。
 5、管理员在GitHub或者邮件接收到开发人员的pullRquest后，在本地用git fetch origin命令下载所有分支，并且将有变更的dev分支合并到master分支并push到线上master。具体操作GitHub上会有命令提示。如果GitLab可以在线上直接合并分支并提交。
 5.1、实际上第5步可以由开发人员开发完dev之后push到线上origin/dev，然后发pullRequest给管理员去合并origin/master。为了尽量防止管理员接受pullRequest合并分支时冲突，开发人员可在本地先拉取最新origin/master先合并一遍再push到线上origin/dev。   当然如果管理员接收pullRequest合并分支时也是可以在线解决冲突的。
    Step 1: From your project repository, bring in the changes and test.
     git fetch origin
     git checkout -b dev origin/dev
     git merge master
    Step 2: Merge the changes and update on GitHub.
     git checkout master
     git merge --no-ff dev
     git push origin master
  注意：git fetch origin master只是拉取了远程的master分支，即origin/master，此时要用git merge origin/master来合并远程分支到本地master分支
  
*团队协作最佳实践：
？？能否直接将线上的dev版本合并到本地对应dev版本，再由本地dev版本提交到线上dev版本？！可以
？？打Tag是不是只能在master上打，还是每个分支都可以打，然后被合并后，Tag也随之合并过去。 ！tag是针对每次commit而言的，而不是针对分支的。 
？？git merge和git merge --no-ff的区别

*在push之前一定要fetch+merge  
*在各个命令操作前可以用git status命令查看下装
*当冲突解决后要commit时只能commit全部，而不能单独文件commit。可以加i参数，如git commit test.txt -i -m '注释'
 ？？A版本对于B版本来说，更新了a文件并且增加了b文件。在A版本合并到B版本过程中，只有a文件冲突，B版本解决了a文件冲突后
     在commit时是要commit a和b文件而不能单独commit a文件，否则对于git cmd或intellij工具都会报错，此时如果push A版本会出现问题
     另外必须特别注意冲突解决完还必须add 所有文件，再commit，此时还是不可以commit部分的文件的。
     如果提交部分文件则则会出现“cannot do a partial commit during a merge”错误

*开启一个端口：
 firewall-cmd --zone=public --add-port=80/tcp --permanent   （--permanent永久生效，没有此参数重启后失效）
 firewall-cmd --reload

*已经做了gitlab+jenkins部署实践，gitlab部署在250，jenkins部署在240

*git的项目不能设置某个目录的访问权限，这是由其分布式特性决定的。 
 如果要达到这个目的，可以将各个目录做为单独的项目仓库，然后设置权限。

*gitlab 在qq成功开启POP3/SMTP服务,在第三方客户端登录时，密码框请输入以下授权码：  dbylasskltmhbfga
 按照腾讯课堂教程配置后，需要gitlab-ctl reconfigure 下再用命令测试是否成功：
 gitlab-rails console         进入控制台，这个命令也是比较慢的
 Notify.test_email('845257580@qq.com','mytitle','hello').deliver_now   发送邮件

 使用该邮箱作为服务 账号：'3331866906@qq.com'    密码：ganktlwtcuwwcjdf

*线上远程仓库有几个分支和本地有几个分支，但是一般本地的分支和远程仓库的分支都是一一对应的。

*gitlab分支保护可以设置【允许merge】、【允许push】。一般设置：
 master分支只有Masters角色才能【允许merge】、【允许push】
 test分支只有Masters角色才能【允许merge】，Developers和Masters角色都能【允许push】

*GitLab+Jenkins自动持续集成大概流程：
 本地代码提交Gitlab服务器，
 Gitlab钩子触发通知到Jenkins，
 Jenkins到Gitlab上拉取代码进行构建，
 Jenkins将构建的包通过shell脚本在目标服务器上进行部署

*实践安装gitlab过程中发现汉化和运行过程中会出现502或卡顿现象，通过加大虚拟机VMware内存和cpu配置就可以了。
*咕泡jams老师推荐gitlab安装教程 http://bbs.gupaoedu.com/forum.php?mod=viewthread&tid=258&extra=page%3D1
*gitlab机器是250，管理员用户名密码 root 123456789
*Jenkins机器是240，管理员用户名密码 admin 123456 全名也是admin

*jenkins+gitlab持续集成，测试环境可以直接在jenkins上安装tomcat，而线上环境可走正规的maven构建远程部署
 *安装Jenkins时注意不要用服务器的root用户去安装  尽量使用别的用户，否则到时候Jenkins在操作服务器时会有权限问题。
 *jenkins安装教程 https://www.cnblogs.com/c9999/p/6399367.html   
 *maven安装教程 https://www.cnblogs.com/HendSame-JMZ/p/6122188.html
 *Jenkins+gitlab手动构建教程 https://www.cnblogs.com/reblue520/p/7130914.html
 *Jenkins+gitlab自动构建教程 https://www.jianshu.com/p/eeb15a408d88
 *Jenkins+gitlab自动构建部署maven项目教程https://www.cnblogs.com/xuxiaojian/p/9079132.html
  注意：*填写clean package  -Dmaven.test.skip=true命令时，改成以下命令
        org.apache.maven.plugins:maven-clean-plugin:clean package  -Dmaven.test.skip=true
        *填写构建后的动作时，
        【WAR/EAR files】是指jenkins所在工作空间里当前maven项目编译的war包路径
        【Context path】是指发布到远程主机tomcat/webapps下的目录
        【Credentials】是tomcat设置远程部署时的账号密码，注意设置tomcat-users.xml的权限设置
 *Jenkins+gitlab自动构建部署文件到远程服务器可参考以下文档进行 （猜测用publish over ftp插件也能实现）
  总体流程 http://blog.51cto.com/xiong51/2091739
  ssh秘钥配置注意： https://blog.csdn.net/u010947098/article/details/61922969
  ssh秘钥生成使用原理看https://blog.csdn.net/lynnyq/article/details/79109992
  注意：
    秘钥是在web服务器对应的用户目录下生成
    jenkins配置构建后操作【Source files】不用加/     而【Exec command】可以不写脚本或写些tomcat重启、旧版本归档等脚本
    搭建测试web环境时，将tomcat和jenkins放在同一台服务器上，然后单独设置任务的工作空间（不是设置整个jenkins的）https://blog.csdn.net/eleven521/article/details/22277053

*部署Tomcat时，如果使用8080端口并且已经开启防火墙了，但还是被拒绝访问，可以查看logs/catalina.out文件里看有没有报错信息输出


*echo $JAVA_HOME 输出javaHome的目录

*gitlab的地址 http://192.168.1.29:9090/        root   123456789

*gitlab使用过程中的问题：
 项目不能设置某个目录的访问权限，所以像597要做到目录权限只能将目录拆分为git项目仓库
 developer角色不能push主分支，即master分支。但其它分支可以。这个可以在分支保护里设置
 不能设置某成员只能clone某分支的代码

*git本地全局用户名配置GitHub的menyin账户，而使用sshkey提交到gitlab时显示的是menyin提交。
 在生成sshkey时，要加上-C '邮箱'，以识别当前用户。
 其实就是多git账户问题，如自己有GitHub和Gitlab账户。详见 https://www.cnblogs.com/fanbi/p/7825746.html

*597如果用gitlab+jenkins做源码版本管理和持续集成的可行方案：
 *所有源码目录还是保持原样在192.168.1.10上，做目录权限控制
 *每个源码目录在gitlab上新建一个项目仓库，并设置成员权限，包括访问权限和行为权限
 *每个源码目录都对应gitlab上一个项目仓库，用.git初始化项目仓库。注意尽量在10机子上操作初始化
 *每个成员都有自己的git账号，去操作192.168.1.10上的源码，谁最后push，gitlab就认为谁push
 *以上步骤可以保持以前的测试环境，实时查看代码修改结果
 *当需要上线功能，开发人员将相关源码push至gitlab的test分支，并在gitlab提交merge request给管理员
 *管理员收到merge request后，进行审核，确认，合并到master主分支，并触发持续集成钩子
 *jenkins持续集成钩子，拉取相关项目（目录）代码往线上服务器部署

？如果有些代码暂时不想push到远程仓库，此时没有add+commit是会导致在fetch线上的仓库有出问题。
 如果要达到这样的需求，可尝试解决方案：
 1.可以在本地开一个devLocal分支，这样本地就有master和devLocal分支。
 master分支对应线上仓库master分支，而本地分支只是作为一个暂时存储代码的分支。
 当有些代码不提交，可以做本地分支部分合并？？？？具体实践该设想，不知是否能成功。
 2.直接将不提交的文件拷贝备份，然后再fetch，merge让线上的覆盖掉本地的这些不push的文件。 当要push时再将备份文件拷贝到本地仓库中覆盖。

？如果两个人同样是使用master分支，则当

？fetch-merge时怎么查看有多少文件有冲突  *用命令git diff --name-only --diff-filter=U
？能不能选择性的fetch某些文件

？？gitlab的行为权限角色能否自定义，现在只有4种
？？如何开辟分支，使得当前项目的owner能操作主分支，而master只能操作开发分支
？？明天搭建正式环境，测试test分支请求合并到master分支
？？明天测试git配置多账号 有github和gitlab账号  应该如何区分配置https://www.cnblogs.com/fanbi/p/7825746.html


??如何向jeecg等打发行版本，里面还有特定的一些说明
??分支、版本记录、本地仓库、本地远程仓库、远程仓库等概念梳理

======================== Idea Git begin ==========================
*在idea中，文件代码红色代表未add，蓝色代表有add过但是修改了，绿色代表已提交

*git使用时，当a文件执行了git add和git commit后，再一次修改，还需要先执行git add再执行git commit
 但是在idea中，有集成了两步操作，直接点击commit的按钮即可。

*idea右下角是什么分支，那么当前就是什么分支。 比如是master
======================== Idea Git end ===========================