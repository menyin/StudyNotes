*597郭总使用的是ab测试工具进行压力测试，详见博客园收藏《压力测试工具ab - Apache HTTP server benchmarking tool》

*教程在StudyMaterials/最新全套软件测试/第四阶段

*主流测试管理工具：QC、禅道、Jira

*超链接测试工具：Xenu（该工具无法验证链接的正确性）、Html Link Validator

*性能测试的核心：业务场景，即哪些业务场景可能会有问题。

*软件测试顺序：功能测试->性能测试->自动化测试（功能稳定的时候进行的工作）->

*性能测试相关概念：
    负载：用户数量、性能指标。如：1万、10万、100万个用户的性能数据
    压力：高压力，系统怎么崩溃的。如：1万个并发持续10天，系统会不崩溃。
    容量：最大能支持的数量，包括用户数量、数据库容量等。如：当数据达到1亿数量级，在查询的时候就会有性能问题
    响应时间：从用户角度评价系统性能，一个行业潜在指标为2,5,10 即2秒为优良，5秒为一般，10秒为差劲
    吞吐量/吞吐率：比如：硬盘IO能每秒能读多少文件、网络IO、CPU内存
    事务处理能力（TPS）

*性能测试关注点：
    响应时间，服务器处理速度
    服务器端、数据库的资源使用情况
    内存资源、线程资源是否能正常回收
    最大访问用户数、最大业务处理数量（不同系统业务重点不一样）
    是否能支持7*24小时运转
    代码：算法、Sql等
    稳定性、可恢复性、容灾性
 
*性能测试核心原理：
    协议
    多线程
    模拟真实场景：要根据真实系统的真实场景模拟出场景，而不是牵强的为测试而模拟出来的场景
  

*Jmeter可测试web应用、接口、ftp、数据库等，最常用的是前两项。能否测试某应用，就看该应用使用的协议是否是Jmeter所支持。
 Jmeter不是浏览器，但它可以模拟浏览器给服务器发送请求，它会启动多个http请求线程来模拟打开多个模型浏览器。
 Jmeter不执行js，也不做重定向。所以它不能100%模拟浏览器行为，也不能100%反应服务器性能。
 Jmeter是模拟目标应用的协议，绕开客户端，进行大流量大负载模拟请求
 Jmeter相关概念：
   线程组，User，即什么人物
   协议，操作，  即什么事
   结果，结果元件，即响应
   验收，断言，  即判断是否正确
   调度器，即我们可以设置一个测试任务在什么时候自己执行，由这个调度器进行调度。
 Jmeter里请求内容、结果、断言都是在线程组节点下右击添加相应的元件，如分别添加HTTP请求、察看结果树、响应断言
  
*SoapUI、PostMan是做接口测试，其主要功能不在性能测试。 松勤课程推荐SoapUI

*Monkey是AndroidSDK里附带的一个工具，可运行在手机模拟器或实际社保中，然后模拟触屏输入，实现多Android应用的压力测试（稳定性测试）。
 可以结合Android的日志进行测试结果分析

*appium 是一个自动化测试开源工具，支持 iOS 平台和 Android 平台上的原生应用，web应用和混合应用。

*Loadrunner
  版本8.2、9.0、9.5、11... 建议使用11，9.5版bug最少
  安装相关问题：
      完会在浏览器里生成一个BHOManage插件，用于录制我们在浏览器的操作来生成自动化测试的脚本。现在11版只支持IE插件，12版的好像支持chrome
      如果BHOManager插件不能录制，有可能是兼容问题也可能安全杀毒工具限制
      启动起来可能比较占用内容，电脑尽量要2G以上的内存
  4个主要部件：
      VUserGennerator用于开发性能测试脚本
      Controller提供用户数量、运行策略、多线程并发、指标监控等
      Analysisd对结果进行分析
      LoadGenerator 负载生成器，controller是通过LoadGenerator实现多线程并发
  VuGen脚本乱码问题：录制前的编码设置和 运行时的编码转换设置
  参数化：如在脚本实现注册，注册的用户名都要不一样，这时用户名这个参数就要动态传递
  关联：例如在每次脚本执行时，服务器都会分配不同的sessionId，此时sessionId就要在首次登陆时获取并存储成参数以供给后续脚本使用。这就叫关联
        关联就是在响应报文中提取一些字符串保存为参数变量供后来的代码做参数化使用
  事务：其实就是在脚本代码的各个节点中划分事务，用以统计这个事务期间的一些数据，如完成时间。loadrunner自动划分事务是按每个action为一个事务的
        更关注事务的响应时间和成功率
  检查点：就是利用一些函数对执行响应结果进行提取，判断是否含有指定内容，然后根据结果进行下一步处理。常常结合事务，用于判断事务的成功率等数据
          因为loadrunner自动判断事务成功与否是根据404和500状态码判断的，而很多时候后端事务出错时会返回200和错误json，此时我们就要根据返回的东
          西进行判断，此时就用到了所谓的检查点，其实就是3个检查的函数。
  集合点：在脚本中插入集合点，当每个用户运行到集合点时会暂停下来，等所有用户都运行到集合点，然后一起执行下面的操作，即模拟了严格并发。
  	  主要适用并发场景，这里并发有两个意思：1.很多用户都在发请求；2.很多用户都在发同一个请求。集合点就是要模拟大量并发
          由于大量并发在同一个请求概率是极小，所以采用集合点进行测试只是倾向于获得被测系统的瓶颈在哪，算是一种压力测试，更关注什么时候被玩死。
          不能反应被测系统的真实性能数据。所谓的性能一般指在正常业务场景下产生的数据，如响应时间，事务成功率等等。
          注意：在每个用户运行到集合点前会有等待时间，所以不能把集合点放在事务开始标志之后，否则事务的响应时间会包含这些等待时间，即出现偏差。
          注意：在controller里有集合点的策略设置（一般保存默认即可），它是和用户进入的方法相关的。如用户是间隔30s进入，则对用户到达集合点会有影响。
  RAMP UP和RAMP DOWN：在controller的交互计划图中，用户数量递增上升的斜线叫RAMP UP，用户数递减的斜线叫RAMP DOWN。这两条线可以作为很多性能指标的参考线。
  负载生成器：在controller的场景组的行的最后一【load generator】列，用于模拟多用户的多线程。实际上由于cpu等硬件限制在一台电脑上是很难模拟1万用户
              所以就需要多增加几台电脑来做负载生成器。而这些负载生成器是由同一个controller进行管控。 
  ip欺骗：ip欺骗功能其实只适用测内网系统，如果去测外网网站，则对于外网网站来说，LR这边只有一个公网ip。 这个功能基本没什么用
          所以如果网站服务器对ip有限制，其实LR是无法模拟出多个ip的。只能和验证码一样，要么去掉验证，要么开个后门万能验证码。
  带宽模拟：即运行时设置里的【网络-速度模拟】
  浏览器模拟：对浏览器缓存等东西进行模拟
  吞吐量：loadrunner所说的吞吐量一般是服务器给客户端响应报文总量。
  点击数：loadrunner所说点击数是指客户端发给服务器的请求数。
  前端性能指标-吞吐率：如果吞吐率为10M，而服务器的带宽为100（即12.5M），则说明服务器带宽够用。而如果吞吐率接近或大于12.5M则说明不够用
                        如果一个页面内容大小为125kb，客户端带宽为2M带宽=250k/s，则在不计算其它因素情况下，0.5s就可以下载完这个页面。
                        注意：这里的吞吐率应该是单从一个客户端接收到的量去计算。
  	      -事务率TPS：即每秒处理的事务数，很关键的指标，脚本定义什么事务，就按什么事务来计算。
              -点击率HPS：即每秒的请求数，实际没有太大的用处。
              -响应时间：
  后端性能指标-CPU：关注使用率（%ProcessorTime）和队列长度（Processor Queue Length）2个指标。请求太多时，CPU要一个个处理.win7里可以设置CPU处理哪些东西的优先级高
              -带宽：关注BytesReceived和BytesSent两个指标。每秒接收数据量或每秒发送数据。 
              -内存：关注使用率和可用数Available MBytes及页交换频率Pages/sec（内存和虚拟内存数据交换频率，越低越好）。后端的缓存一般都只内存上的缓存，前端的缓存有磁盘上临时目录的缓存也有内存。
                     虚拟内存：用某一块磁盘区域来模拟内存就叫虚拟内存，因此就会涉及到页交换频率的概念。 内存是硬盘价格和速度都在100倍左右。 内存和硬盘速度可以用工具EveRest测试
              -磁盘I/O：关注使用率%Disk Time和队列长度Avg.Disk Queue Length，两个指标都是越低越好。磁盘如果读写频率太高伤害越大
              -线程池：服务器通过启动一个线程来负责一个用户的请求。而线程池就是一个存放线程的容器。线程消耗的是CPU的资源，当前CPU利用率到达100%不一定崩溃但队列会变长反应就变慢。如果是内存会崩溃。
               
  实战：在官方定飞机票demo中，回放录制时不能扫描出关联，即扫描不出sessionId   
  几个关键词：运行时设置、录制时设置、性能测试最重要是要模拟真实的业务场景 、绝对严格的并发是不存在的（就如世界上找不出两片相同的树叶）

*loadrunner实战：
  *在回放时默认会忽略思考时间，这时候有的网站为防止刷流量或灌水会限制刷新时间大于1秒，此问题可在运行时设置里将【忽略思考时间】勾选去掉
  *运行和回放的功能应该是一样的
  *回放过程中会产生快照，可在运行时查看器中查看。如果某步骤的页面有问题，而loadrunner因此找不到对应的文本链接，这个快照有助于我们解决bug
  *在回放或运行后，可以在【视图-测试结果】查看测试结果
  *脚本里的迭代次数和controller里的用户数及参数化区别和关系。迭代即同个用户多次执行脚本。用户数即多个用户执行脚本，有可能执行（迭代）多次。
   由于迭代只同一个用户的多次操作，所以一般会有时间间隔并且基本不可能重叠操作，所以就可以设置“步”。 
   特别注意迭代过程中，参数的迭代方式需要另外设置，每次迭代时在参数列表里取唯一值或依次获取都需要在参数属性里做设置【选择下一行】【更新值的时间】。
   注意：如使用controller的运行时间则脚本里的迭代次数则无效。   
   详见博客园收藏《loadrunner中并发数与迭代的区别》、CSDN收藏《LR参数化的迭代设》
  *在controller中可以运行多个脚本，这些脚本计划方式分为【场景】和【组】，场景即这些脚本公用场景，组即这些脚本各自用自己的场景（用【全局计划】设置）。
   如果选择组则，需要选中每个脚本然后再用【全局计划】分别设置自己的场景。  注意不建议运行多个脚本
  *在controller的全局计划中，当运行模式选实际计划，则全局计划中可以新增一行（action），比如对用户数的场景控制。如可以设置用户数在不同时间有不同起伏。
  *服务器性能监控：通过LR我们可以连接到服务器进行性能监控，另外每个操作系统都会有自己自带的性能监控工具，win7的在【管理工具-性能】。
                   常关注的几个性能指标有：
                   按博客园《Loadrunner添加服务器监控》在添加远程服务器性能监控时，链接“ \\被监视机器IP\C$”步骤一直不行，后来发现服务器的Administrator账户没启用。  
  *在analysis里的一些时间指标可能和controller里实时监控到的时间指标有出入，是因为analysis的这些指标默认是忽略思考时间的，可以通过设置将思考时间包含进来。
  *在analysis里的web细分图收集的数据并不是很准确。因为它只抽样10%数据。 
  *在analysis里的图表的几个比较主要的右键菜单：
   合并图：合并几个图表可以查看他们的关联关系和趋势关联，注意右击哪个图表哪个图表就是“因”，被合并的图表是“果”
   自动关联：会多出被合并的图与基准图的相关性列，比如相关性是88%,这种相关性可能是正相关，也可能是负相关。
  *在controller里，对于性能指标影响分析时，场景设置有两个原则：1.ReamUp/Down设置越慢越好，2.平衡好运行时间
  *当web容器（如apche）的线程数量设置为10，而我们用LR模拟20个用户并发请求，则web容器处理不来就会让后来的用户线程等待，如果久了用户可能就超时或者web容器直接拒绝请求。
   但web容器的线程数量要根据服务器的CPU及自身限制而设置，自身限制就比如apche支持200个线程，而tomcat支持500个线程。 
   在服务器端应对客户端请求需要启用线程，在对应的数据库请求也需要启用线程。
   所以一个服务器能承受多少负载，和web容器线程数量，自身硬件性能，业务复杂度等很多因素相关，需要实际测试来得出结论。
  *性能测试方案的制定：网上下载实际案例《Discuz VS Phpwind 性能巅峰对决》，下载地址http://bbs.51testing.com/thread-184943-1-1.html
                       《新疆移动NGBOSS1.0性能测试方案》
  *在analysis里将响应时间、点击数等指标和虚拟用户数相关联，如果相关性不大的话，则说明服务器处理这些用户数是绰绰有余。如果相关性明显则说明已经接近服务器承载能力了。
*loadrunner运行逻辑：

  *action，比如发帖案例，可以登录作为一个action，发帖作为一个action，退出登录一个action。则一个登录和退出可以有多个发帖操作（迭代多次）
*loadrunner脚本中的链接不要使用localhost或者127.0.0.1，因为如果有多个负载生成器电脑的话，负载生成器在执行该脚本是就相当在给自己本地发请求。
       
*通常网络带宽和下载速度的比例平均值是8：1

*测试258网站时出现问题
 *报错：Action.c(34): 错误 -27796: 连接服务器“www.258.com:80”失败: “[10048] 地址已被使用   
  解决：在脚本运行时设置里browser emulation - simulate a new user on each iteration勾选去掉
 *报错：503 (Service Unavailable)
 *原因：目标服务器使用了Nginx限制ip请求次数以及并发次数
 *解决：试着看loadrunner有没有什么办法实现真正的ip欺骗
 

实践1：4个用户 迭代2此  参数设置为Unique+Once
预期结果：4个用户 各发2条帖子
实践2：模拟100、200、300、400用户集合点严格并发访问汇博，进行首页后搜索销售
实践2：模拟100、200、300、400用户严格并发访问汇博，进行首页后搜索销售

*运行速度：内存>固态硬盘>机械硬盘

*java、.net等高级语言是用自己的框架做内存管理，而c或c++是直接管理操作系统的内存。

？在志愿者平台批量注册用户时出现“无法从行185中读取文件”问题，其实是在185条记录是出现格式错误（最初以为是程序内存等资源问题，结果不是）。 

？实战jmeter、学习抓包工具、

*相关英文单词：performance性能、load负载、stress压力、volumn容量、response响应

 