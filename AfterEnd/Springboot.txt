*此部分学习教程可看bili《黑马程序员SpringBoot2全套视频教程》，相关笔记资料网盘“6、SpringBoot2全套”目录
 具体相关组件整合实践可看GitHub的收藏https://github.com/javastacks/spring-boot-best-practice


*springboot项目可通过intellij进行创建，这时需要连接创建的服务，这个服务可用是官网的https://start.spring.io 也可以用阿里云的服务（但是创建出来项目有些非规范，不建议使用）

*springboot有整合了很多技术，有一些使用技巧：
 *在spring-boot-dependencies-2.5.4.pom里有对应各种技术的依赖版本管理，有时候忘记可以到里面进行查找
 *每一项技术一般都是通过starter启动，所以找到的@ConfigurationProperties注解配置类和@EnableConfigurationProperties注解的启动类可以了解相关原理或信息。
 *在yml配置文件里输入对应技术部分关键字，会有自动提示，如输入redis...
*辅助功能：内嵌web容器：tomcat、jetty、undertow

*rest风格在springboot主要是这几个注解的使用
 @RestController：等价于@Controller+@ResponseBody
 @PathVariable(“id”)
 @PostMapping：相当于@RequestMapping(method = RequestMethod.POST)
 @DeleteMapping
 @PutMapping
 @GetMapping
 @RestControllerAdvice：用于设置Controller公共异常处理。

*springboot配置
  *springboot每个配置都有对应的starter组件。
  *springboot常用配置（相关配置到官网进行搜索https://docs.spring.io/spring-boot/docs/2.6.14/reference/html/ 点击Application Properties目录）
    日志配置logging.level.root=debug
  *配置的格式：application.yml（主流）、application.properties、application.yaml
  *配置文件加载顺序：
    优先级：application.properties>application.yml>application.yaml
            实际上如果包含运行jar时的临时属性配置的话，总的配置优先级顺序可看https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config
    覆盖：有共同属性则按优先级顺序相互叠加并相互覆盖
    配置文件4级分类：配置第四级覆盖第三级覆盖第二级覆盖第一级。 实际应用中，通过不同的目录可以设置不同的密码或权限就可以进行权限管理
            一级：resource目录下的配置文件，如application.yml。 这个目录的配置文件一般是开发人员使用
            二级：resource/config目录下的配置文件，这个目录的配置文件一般给项目经理使用
            三级：在服务器jar包所在目录下的配置文件，这个目录的配置一般给运维人员（如银行系统运维人员）
            四级：在服务器jar包所在目录下的config目录的配置文件，这个目录的配置一般给高级人员（如银行行长）

  *自定义配置文件：springboot默认加载“application.yml”名称的配置文件，那么怎么让springboot识别自定义名称的配置文件呢？
            方式一：通过jar运行配置临时属性--spring.config.name=myApp可以使得“myApp.yml”配置文件也被识别生效（当然intellij要配置识别）
            方式二：通过jar运行配置临时属性--spring.config.location=classpath:/myApp1.yml,myApp2.yml可以使得“myApp1.yml、myApp2.yml”配置文件也被识别生效，并且myApp2.yml会覆盖myApp1.yml（当然intellij要配置识别）
            注意：1、单服务器项目：使用自定义配置文件需求较低
                  2、多服务器项目：使用自定义配置文件需求较高，一般将所有配置文件都放在一个目录中，统一管理
                  3、微服务项目：所有配置文件通过配置中心管理，动态加载。
  *多环境开发（yaml版）：
           在单个配置文件里用“---”来分割不同环境的配置，然后用spring.profiles.active:dev来设置具体执行的环境（现在都用spring.config.activate.on-profile:dev）
           在多个配置文件来分割不同配置文件，然后在主配置文件里用spring.profiles.active:dev来设置具体执行的环境
             注意：用spring.profiles.active:@profile.active@可以读取pom里配置的profile.active属性，从而在运行打包时可以实现加载不同环境配置文件（至于用哪个环境打包可以在intellij的maven的生命周期管理栏进行选择）
                   在intellij里有个bug：如果pom用activeByDefault设置了pro环境，但是debug运行还是加载dev环境，可以在maven生命周期栏里点击compile重新编译即可
  *多配置文件的引入：
           通过spring.profiles.include:appUser,appRole...进行设置，则appUser.xx,appRole.xx等配置文件就能生效了。并且后面配置文件会覆盖前面的配置文件
           通过spring.profiles.group.dev=devAppUser,devAppRole和spring.profiles.group.pro=proAppUser,proAppRole可以设置不同环境分组
           注意：springboot2.4+用group属性替代了include属性，group也是主流

  *在yaml里打配置时没有提示：Project Settings->Facets->点击右侧顶部"绿叶"->点击+号选中对应的yaml配置文件

  *yaml和yml格式要求注意：
      *属性值是特殊字符串可以用双引号，如myname: "Hello\tWord"则最终得到的是"Hello Word"
             注意：springboot配置支持不同进制的数（如0127会识别为八进制，0x12B识别为十六机制），
                   如果配置password：0127则配置映射类接收到的String是87。正确配置就应该是password："0127"

      *属性名:后面有个空格
      *一个属性下多个属性或属性值或对象的用-，下面示例也可以这样写 likes: [geme,music]、users: [{name:jack,age:18},{name:rose,age:19}]
             如likes:
                - game
                - music
             再如：users:
                     -
                      name: jack
                      age: 18
                     -
                      name: rose
                      age: 19
   *配置读取
     方式一：
      @Value("${name}")         @Value("${likes[0]}")
      private String name;       private String likes0;
     方式二：
      @Autowrited
      private Enviroment env;//用env对象获取
     方式三（主流）：
      @Component
      @ConfigurationProperties(prefix="user")
      public class UserProperties{
         private String name;
         private int age;
         ...
      }

   *配置文件里的属性相互引用：如tmpDir：${baseDir}\temp
   *加载测试专用属性：@SpringbootTest(properties = {"test.myprop=11"}),然后就可以在测试类里用@Value("${test.myprop}")注入引用
                      @SpringbootTest(args = {"--test.myprop=11"}),然后就可以在测试类里用@Value("${test.myprop}")注入引用
                      注意：args和properties同时存在，则前者覆盖后者
   *加载测试专用的bean：在项目的测试目录下新建一个@Configuration类，如：MsgConfig
                        在测试引导类上添加@Import(MsgConfig.class)将测试专用的bean注入到测试的spring容器中。
                        在测试引导类里@Autowired对应的测试专用bean（如Msg）
                        注意：springboot的单元测试总体原理就是：在测试引导类里不仅要加载源码的资源，也要加载测试相关的专用资源。然后运行测试
*数据源：
 springboot提供了3种内嵌的数据源：
   HikariCP 一般应用我们用DruidDataSource，但是如果没有Druid等数据源，则会默认用HikariCP。 HicariCP配置时注意url不能配置在spring.datasource.hikari属性下
   Tomcat提供DataSource
   Commons DBCP

*jdbc-template技术：在mybatis-plus-bot-starter里其实就包含了jdbcTemplate相关的包

*数据库：
 springboot提供了3种内置的数据库（都是java写的小型数据库，并且支持内存启动和独立启动）：
   H2
   HSQL
   Derby

*缓存：
 springboot已经统一了缓存规范，缓存实现可以用以下等方案，注解@EnableCaching、@Cacheable、@CachePut这些都是一样的
 常用注解：
  @EnableCaching 注解在启动类，标志开启springboot的缓存
  @Cacheable 被注解的方法执行时会添加对应的缓存
  @CachePut 被注解的方法执行时会添加对应的缓存
  @CacheEvict 被注解的方法执行时会删除对应的缓存

 *simple：默认的缓存方案（内存）
  引入spring-boot-starter-cache
  引导类加@EnableCaching
  在service方法中使用缓存注解@Cacheable或者@CachePut
  如   @Cacheable(value="cacheSpace",key="#id")  //value缓存的名称空间，key是缓存查询的key
       public Book getById(String id){return bookDao.selectById(id);}

 *redis
  springboot的缓存规范也整合了redis，此时redis是作为缓存来使用。
  基本原理是将@Cacheable(value="cacheSpace",key="#id")里的cacheSpace和id拼接作为缓存key来存储到redis中
  配置spring.cache.redis...可以设置相关参数，包括过期时间。
 *Ecache
  注意：处理引入依赖，配置yml，还要增加/resources/ehcache.xml配置。它的具体配置在ehcache.xml里面，而redis等其他缓存实现是在yml里配置的。

 *Memcached：springboot并没有整个Memcached

 *Jetcache：对springCache进行封装，新增实现了多级缓存、缓存统计、自动刷新、异步调用、数据报表等功能
            既能支持本地缓存（LinkedHashMap和Caffeine）也能支持远程缓存（Redis和Tair）
            注意：它在spring-boot-dependencies里没有依赖管理，可以到maven仓库找
*redis
  RedisTemplate
  问题：为什么代码用redisTemplate保存的值，再到服务器redis-cli进行连接时获取不到？
  原因：StringRedisTemplate和redisTemplate的区别：前者是操作String后者是操作对象（需要序列化）
       使用RedisTemplate保存的key、value都是经过序列化的，而在用redis-cli连接服务器操作时key、value都是字符串
       所以解决上述问题：要么序列化方式要调整，要么用StringReidsTemplate

  Jedis
    springboot默认不是使用Jedis，所以要使用要导入jedis的依赖包
  Lettuce
    springboot默认的redis的客户端实现技术
  jedis和Lettuce的区别：
    Jedis是同步的，不支持异步，Jedis客户端实例不是线程安全的，需要每个线程一个Jedis实例，所以一般通过连接池来使用Jedis，但连接池性能就大受影响。
    lettuce是基于Netty框架与Redis服务器连接，多线程可以公用一个连接，底层的StatefulRedisConnection自身是线程安全，可以保障并发访问安全。支持异步
    实际上：jedis和lettuce都使用了连接池，前者使用的是我们普通的tcp连接，而后者使用的是netty的channel连接，后者性能高并且可以保证线程安全。 
                因为底层netty的channel是使用selecter去轮询，所以一定程度上讲是“同步”，而jedis却是基于线程的一种方式，其微观切换是时间片切换。 
             

*测试相关：
   *加载测试专用属性：@SpringbootTest(properties = {"test.myprop=11"}),然后就可以在测试类里用@Value("${test.myprop}")注入引用
                      @SpringbootTest(args = {"--test.myprop=11"}),然后就可以在测试类里用@Value("${test.myprop}")注入引用
                      注意：args和properties同时存在，则前者覆盖后者
   *加载测试专用的bean：在项目的测试目录下新建一个@Configuration类，如：MsgConfig
                        在测试引导类上添加@Import(MsgConfig.class)将测试专用的bean注入到测试的spring容器中。
                        在测试引导类里@Autowired对应的测试专用bean（如Msg）
                        注意：springboot的单元测试总体原理就是：在测试引导类里不仅要加载源码的资源，也要加载测试相关的专用资源。然后运行测试
   *测试web应用：
               *在测试引导类中启动web环境：测试引导类加@SpringbootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)//启动端口可以选自定义和随机
               *开启模拟调用web模式：测试引导类加@AutoConfiguraMockMvc（具体调用方式网上查，不做深究...）
               *业务层测试事务回滚：应用场景是我们执行测试但是不想在数据库留下测试数据。 所以在测试通过后对执行的事务进行回滚。 用@Transaction注解在测试引导类。
               *测试用例设置随机数据：在测试配置文件里设置test.user.name=${random.value}然后在测试代码中获取值。 random对象下提供了各种类型的随机值，并可设定随机值的范围
   *@BeforeEach和@AfterEach注解的测试方法是在所有测试方法之前和之后运行的方法。可以做一些初始化或收尾的工作。
*日志操作：
 通常我们使用private static final Logger log=LoggerFactory.getLogger(UserController.class）;然后在代码中使用
 但是使用lombok可以用@Slf4j注解就可以注入log对象，然后在代码中使用。
 日志级别debug<info<warn<error  默认是info级别（info、warn、error都会输出），springboot通过配置logging.level.root:debug（此方式主流，root代表所在的范围0）或debug: true进行设置。

 注意：logging.level.xxx: debug中的xxx可以是分组可以是包名。 如果是分组可以通过loggin.group.mygroup:com.cny,com.xf
       输出日志时有时看见有w.s.c.xxx的类，其实它的包名是经过简化的格式。
*springboot整合starter组件
 *整合junit及单元测试的使用详见黑马课程23集
   注意代码的引导类所在包和测试引导类所在包不一致，单元测试要正常运行则测试引导类需要用进行指定classes，即@SpringBootTest(classes=SpringbootApplication.class)
 *整合MybatisPlus（简称MP），用intellij创建没有MP对应的组件，可以手动加maven依赖整合
  注意：平常调试可以在配置里设置输出执行日志，可以看到具体执行的sql
 *整合Druid
   注意:不管什么数据源，可以正常配置spring.datasource下的url、username...，然后通过spring.datasource.type=com.alibaba.druid.pool.DruidDataSource来指定数据源类型
        另外一种方式（主流）：在spring.datasource.druid底下配置url、username....

*springboot运维相关：
  打包运行：
     windows环境：用intellij打包（可参考jeecg-boot打包文档）或者用“mvn pakage”
                    注意：打包时会执行测试，如果有单元测试demo会发现它们都会执行一遍。如果要跳过测试，可以在intellij的maven生命周期管理的工具栏上有对应工具可点击
                          这些打包命令都要在pom文件里引入spring-boot-maven-plugin插件。？运行java -jar xxx.jar报错“xxx.jar中没有主清单属性”，可能是因为没引入该插件
                          *windows查看端口被谁占用命令：netstat -ano | findstr "80"   获取到pid（如9480）再用命令 tasklist | findstr "9480"  如果想杀死该进程则用taskkill -f -pid "9480"
     linux环境：运行可参考jeecg-boot打包文档

  临时属性:
     运行java -jar xxx.jar --server.port=8090   此命令的--server.port就是临时属性，可以覆盖我们的springboot里的配置。
     intellij里的Run/Debug Configuration里的Program arguments项也是配置临时属性的
     在springboot的引导类的main方法的args参数就是这些临时属性。所以SpringbootApplication.run(xxx.class,args)里的arg也可以自定义
  高级配置：
  多环境开发：
  日志：


*springboot热部署：
 概念：
   重启（restart）：自定义开发代码，包含类、页面、配置文件等都会更新，加载位置restart类加载器
   重载（reload）：jar包，加载位置base类加载器
 热部署是一个restart的过程。热部署仅加载开发者自定义开发的资源，不加载jar资源。
 使用方式：
    手工启动热部署：引入依赖spring-boot-devtools，使用项目“Build Project”启动热部署（快捷键Ctrl+F9）。
    自动启动热部署：在手动热部署基础上在settings-compiler勾选Build project automatically、另外ctrl+shift+alt+/进入Registry勾选compiler.automake.allow.when.app.running
                    注意：*自动热部署设置好后，要intellij编辑器失去焦点5s后才会进行重新刷新构建。
                          *有些资源有参与热部署，有些未参与。 通过配置spring.devtools.restart.exclude: static/***,public/**来排除热部署
 			   默认不参与热部署的目录有/META-INF/maven、/META-INF/resource、/resources、/static、/public、/templates
                          *spring.devtools.restart.enabled=false用于关闭热部署，在实际部署中，由于诸多配置文件相互覆盖，造成该配置失效。 可以根据前面学过的“总的配置优先级顺序”到高一级里配置。
                           如系统环境变量配置。如在springboot引导类代码里设置System.setProperty("spring.devtools.restart.enabled","false")
               具体参考csdn《IDEA2021之后版本的热部署》
               注意：使用spring-boot-devtools自动部署可能引发一些类加载器问题，报错导致项目不能启动（jeecg-boot遇到过）

*@ConfigurationProperties的作用
 *用于将配置映射成具体类
 *用在将配置的属性映射注入到@Bean对应的对象上（官方说法：为第三方bean绑定属性）
  如：@Bean
      @ConfigurationProperties(prefix="mydatasource")//加上该注解会使得配置文件里mydatasource下的属性注入到这个druidDataSource对象里
      public DruiDataSource datasource(){
          return new DruidDataSource();//注意此处返回的仅仅是一个空的对象
      }
 *@EnableConfigurationProperties
  @EnableConfigurationProperties(HelloProperties.class)注解通常用于springboot的starter组件的启动类
  它有2个作用：*为starter指定配置映射类为HelloProperties开启属性绑定（此时HelloProperties类不用再设置@Component注解就能用@ConfigurationProperties）
               *将HelloProperties实例注入到spring容器中（所以如果HelloProperties类再使用@Component就可能会启动报错“重复bean”）
               注意：如果已经@EnableConfigurationProperties(HelloProperties.class)，再在HelloProperties类设置@Component("helloProperties2")则会造成注册两个不同名同类型bean

 *松散绑定：配置文件里的属性名的"_"、"-"、驼峰命名等都能匹配到@ConfigurationProperties的映射配置类属性上，其中"_"、"-"都会被忽略去除然后进行匹配
            主流的模式是"-"(烤肉串模式)或驼峰模式，即myprop.ip-address或myprop.ipAddress
            注意：这个松散绑定模式只适用于@ConfigurationProperties注解的类，像@Value注解是没有这种松散绑定模式的。
                  这个松散绑定模式是指配置文件里的属性名，类里的属性名一般就使用全小写格式，如ipaddress
  如：@ConfigurationProperties(prefix="myprop")
      public class MyProp{
        private String ipAddress;//配置文件里myprop.ip-address、myprop.ipAddress、myprop.ip_address、myprop.ipa-ddress等都能匹配成功
      }
 *计量单位：在配置文件里配置的值是秒或分或小时，有时候我们要明确单位，我们可以在配置映射类里用相应单位注解标注（jdk8提供）。常用单位注解如下：
  如：@ConfigurationProperties(prefix="myprop")
      public class MyProp{
        @DurationUnit(ChronoUnit.HOURS)
        private Duration serverTimeout;//时间单位h

	@DataSizeUnit(DataUnit.MEGABYTES)
        private DataSize dataSize;//容量单位MB。如果不用@DataSizeUnit注解并且配置文件里datasize:1KB，那配置类的dataSize属性值是1024B，因为默认单位是B


      }
  *JSR303数据校验规范：bean的数据校验，这并不springboot的规范。
     使用方式：先导入依赖validation-api（这是JSR303的规范依赖），导入依赖hibernate-validator（这是JSR303规范的实现类框架）
               在bean类用@Vlidated，在对应的属性用相应的限制校验注解，如@Max(value = 8888,message="值不能超过8888")

*springboot原理：
 *自动配置
    *bean加载方式（复习咕泡摘要“spring的bean相关”）
    *bean加载控制（复习咕泡摘要“spring的bean相关”）
    *bean依赖属性配置（复习咕泡摘要“spring的bean相关”）
    *自动配置原理
       1、收集spring开发者的编程习惯，整理了开发中常用的技术列表（假定叫技术集A）
       2、收集常用技术（技术集A）的使用参数，整理开发中每个技术常用的设置列表（假定叫设置集Ap）
       3、初始化springboot基础环境，加载用户定义bean和导入其它依赖坐标，形成初始化环境
       4、将技术集A所有技术都定义出来，在spring/springboot启动时默认全部加载
           具体实现：在spring-boot-autoconfigure包里的spring.factories里有配置springboot收集的技术集A的自动装配类
           注意：这里全部是springboot为各项技术整合而编写的自动配置类，如RedisAutoConfiguration。
               虽然有自动配置类，但是该配置类加载到springIOC往往都有条件的，如自动配置类添加了@ConditionalOnClass({RedisOperations.class})
               此时只有项目中引入对应的starter依赖，带有条件对应的类(如：RedisOperations.class)，从而实现有加starter才能加载对应的自动配置类效果。
               常用的@Conditional子集注解要了解，如@ConditionalOnProperty
       5、将技术集A具有使用条件的技术约定出来，设置条件加载，由开发者决定是否使用该技术（如@ConditionalOnClass）
       6、将设置集Ap作为默认配置加载（约定大于配置），减少开发者配置工作量
            如：用@ConditionalOnMissingBean(name = {"redisTemplate"})标记RedisAutoConfiguration#redisTemplate()方法，实现有则不加载，无则创建加载redisTemplate对象的功能
       7、开放设置集Ap的配置覆盖接口，由开发者根据自身需求决定是否覆盖默认配置。

    *变更自动配置
      添加：添加resources/META-INF/spring.factories文件，在里面定义新增的自动配置类
      排除：方式一：配置文件里配置spring.autoconfigure.exclude属性
            方式二：@SpringBootApplication(exclude ={RedisAutoConfiguration.class}) //当然也可以用类名称去排除
            方式三：在pom文件中将对应的依赖(如starter)排除即可
      注意：这里是指自动配置的变更，也就是自动配置类的添加与排除，普通的类是不适用的。
    *注意：springboot默认有集成的技术（如redis）的自动配置类及相关功能类一般在spring-boot-autoconfigure包里
           springboot未集成的技术（如mybatis）的自动配置类及相关功能类可能在starter所在包（参考druid）
                     或单独一个xxx-spring-boot-autoconfigure包下（如mybatis-spring-boot-autoconfigure），而xxx-spring-boot-starter包里并没有相关的自动配置类或相关功能类
           springIOC的bean的名称很重要，具体名称可以application.getBeanDefinitionNames()遍历查找。如在springboot定时任务注解中根据beanName注入动态参数如下：
              @Scheduled(cron="0/#{myProperties.propone:5}")   //此处用EL表达式读取bean的属性。但是关键问题是这bean在springIOC的名称要是myProperties并且不能是全路径类名等，否则将读取不到。如com.cny.myProperties中com会被认为是一个bean但实际是没有的。
              public void print(){....}                        //此处如果用$符号则和@Value一样读取配置文件，但是就不能读myProperties类了（它可能有一些处理逻辑）

 *自定义starter
     *提示插件
       *在项目或者starter包里有引用spring-boot-configuration-processor才能提示，打包的时候会在resources/META-INF/spring-configuration-metadata.json
        在开发自定义starter时可以包含该依赖，但是打包发布的时候要排除（即<scope>runtime</scope>）。否则项目也有引入提示依赖，则提示都会变成两个。
       *spring-configuration-metadata.json的hints节点可以配置提示的文档解析（即文本说明）
 *核心原理


*环境jdk1.8+



*想要了解springboot原理，可以关注了解spring5的源码解析

*想了解springboot下的一些第三方框架的实现，可以由spring.factories入手，查看启动类

*springboot干了什么事情:
 *利用pom依赖，快速整合第三方框架，如mybatis、hibernate等，一般都是pom引入一个“starter”
 *使用注解完全替代xml配置，但大部分是spring自带的注解，如@Bean、@MapperScan等
 *集成了嵌入式的web容器，如tomcat。

*在pom.xml可以看到有一个依赖组件spring-boot-starter-web整合了springmvc+spring，是用于启动web程序的

*springboot和springCloud关系
 springCloud是当前比较流行的微服务解决方案框架、并不是一个rpc框架，它依赖于springboot

*@RestController == @Controller+@ResponseBody   springboot很多注解都是spring体系自带的，只是用的比较少。

*基本的启动方式：
 1.@EnableAutoConfiguration+@ComponentScan("com.example.demo2")注解启动类，@RequestMapping("/")+@RestController注解Controller
 2.@SpringBootApplication注解启动类，@RequestMapping("/")+@RestController注解Controller
   @SpringBootApplication默认扫包范围就是当前启动类的包和子包

*spring的@Configuration注解，让被注解的类变成启动类
*@EnableAutoConfiguration注解的作用是它会去spring-boot-autoconfigure-2.1.8.RELEASE.jar下的spring.factories文件里找org.springframework.boot.autoconfigure.EnableAutoConfiguration对应的109个类，把在classpath下109个中有的类注册到ioc容器里
*@SpringBootApplication包装了@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan
 @SpringBootConfiguration又包装了spring的@Configuration注解

*@SpringBootApplication(exclude = {DruidDataSourceAutoConfigure.class, RedisUtil.class})用该注解会报错
 因为exclude只能排除auto-configuration类型的类，而RedisUtil.class并不是自动配置类，应该用@ComponentScan的excludeFilters进行排除
 可参考csdn《【spring-boot】排除/不加载某些Bean》

*@SpringBootApplication和@ComponentScan({"cn.aaa","com.bbb.cloud"})同时出现，则以@ComponentScan会覆盖@SpringBootApplication里的@ComponentScan

*@Autowired默认是bean是必须的，通过required=false可设置为非必须

？spring-boot-autoconfigure-2.6.6.jar这个类里面有一些springboot官方starter的配置类，如MailSenderAutoConfiguration是spring-boot-starter-mail的配置类
？为什么有的jar包没有类只有一些文件。如spring-boot-starter-data-redis-reactive-2.6.6.jar只有LICENSE.txt、MANIFEST.MF、NOTICE.txt三个文件 ！可能sprngboot109个默认自动配置类已经包含了，也可能单独一个xxx-spring-boot-autoconfigure包下（如mybatis-spring-boot-autoconfigure）
？jeecg的jeecg-boot-base-core和jeecg-boot-common里面有一些依赖组件需要配置文件里有相应的配置，如ES就需要相应的配置，目前能想到方法就是：加对应配置（相对简单但会有很多无用配置）或启动类将相关组件类排除（比较难搞）
？我们平常的一些starter组件一般到哪里去找源码？ 通过intellij下载源码、GitHub...?
================================================
MybatisPlusAutoConfiguration
DruidDataSourceAutoConfigure

@Component
StaticConfig

*近几天seat的demo跑步起来原因是DruidDataSourceAutoConfigure自动配置数据源，但是demo中yaml配置没有对应格式数据源配置。所以在@SpringBootApplication中用exclude排除
 解决上述问题后再启动会报无主数据源，这个是dynamic-datasource数据源所要求的，那么就在yaml多配置spring.datasource.dynamic.datasource.master节点或者将主数据源指定为order（即primary: order）
 解决上2个问题后，又发现由于demo项目引入了jeecg-boot-base-core和jeecg-boot-common的jar包，里面包含了一些redis，ES相关的bean，需要相应的配置缺失，所以就在yaml里加了这些相关无用的配置
                  但这始终不是办法，最后决定要在启动类里通过@SpringBootApplication或@ComponentScan进行排除相关无用的类？？？？明天再研究

？怎么使得有些自动配置类或bean在有相关配置才能进行spring注入呢？比如EmailSendMsgHandle需要配置邮箱服务
  解决方案：
    *如果是非自动配置类则直接使用@ComponentScan里的excludeFilters进行排除
    *如果是自动配置的相关类，也就是通过“springboot的Starter”注入的，那么重点就是要找到对应的自动配置类
     比如报错“at com.sun.mail.smtp...”相关错误时，我们并不知道这个使用哪个组件报的错，但我们可在jeecg-boot项目全局搜索或者百度很容易定位到是“spring-boot-starter-mail”组件
     但是进入它的pom文件并不能定位到它所在的jar包位置，但是可以找到对应的yaml配置，找到spring.mail.username并且ctrl+单击就能进入所在包，从而找到它对应额配置类MailSenderAutoConfiguration
     拿着MailSenderAutoConfiguration到启动类进行排除即可

================================================


*常用接口：
 CommandLineRunner、ApplicationRunner 接口是在容器启动成功后的最后一步回调（类似开机自启动）。

*yaml文件去重减少文件大小,properties文件不能去重，文件比较大

*springboot本身不带jsp，如果要整合，则项目打包类型必须是war类型

*starter原理（自定义starter插件）：
 可参考blogs《SpringBoot自定义Starter》
 在一个插件maven项目pom中引入springboot相关的依赖（其中有一个spring-boot-configuration-processor构件是用于yml配置文件提示用的）
 定义一个配置的映射类，用@ConfigurationProperties注解,如DemoProperties
 编写我们插件的功能代码类，如DemoService
 定义一个按照规范编写启动的插件启动类，如DemoConfig，用@Configuration、@EnableConfigurationProperties(DemoProperties.class)注解。
 在resources/META-INF/spring.factories来指定插件启动类DemoConfig，实际上是进行自动装配。
 在实际业务项目中引入demo-spring-boot-starter，并通过注解注入功能插件相关bean，如DemoService

？starter执行原理过程


*spring.factories是spring提供的spi机制，springboot加以利用，作为springboot的starter的基本机制
 springboot在spring-boot-autoconfigure-2.1.8.RELEASE.jar的spring.factories下定义了109个常用的类，只要在classpath能找到，它就会将其注册到IOC中去
 如ServletWebServerFactoryAutoConfiguration就是启动web应用

*starter潜规则：
 spring-boot-starter-web格式的是官方插件
 mybatis-spring-boot-starter格式的是非官方插件

*WebApplicationType配置为none则不回内嵌web容器，以满足有外部web容器部署的需求。


*SpringBoot启动流程主要分为两个步骤
 一、创建SpringApplication对象。
 二、调用SpringApplication对象的run()方法实现启动，并且返回当前容器的上下文。
 流程详解：
 一、创建SpringApplication对象，SpringBoot容器的初始化操作。
 二、获取当前应用的启动类型。（原理：判断当前classpath是否有加载servlet类。WebApplicationType分为NONE、SERVLET、REACTIVE三种类型）
 三、setInitializers读取springboot包下的META-INF/spring.factories获取到对应的ApplicationContextInitializer装配到集合中
 四、setListeners读取springboot包下面的META-INF/spring.factories获取到对应的ApplicationListener装配到集合中
 五、mainApplicationClass获取当前运行的主函数
 六、调用SpringApplication的run()方法实现启动
 七、stopWatch.start();开始记录项目的启动时间
 八、getRunListeners(args)；读取META-INF/spring.factories，将SpringApplicationRunListeners类型存入带集合中
 九、listeners.starting();循环调用starting()方法
 十、ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);
 listeners.environmentPrepared(environment);循环读取配置文件到springboot容器中，因为配置文件可以自定义，就会存在多个。
 十一、Banner printedBanner = printBanner(environment);打印Springboot启动标志
 十二、context = createApplicationContext();创建springboot上下文
 十三、prepareContext(context, environment, listeners, applicationArguments, printedBanner);为springboot上下文设置environment属性。
 十四、refreshContext(context);刷新上下文
 十五、开始创建Tomcat容器
 十六、开始加载SpringMVC
 十七、afterRefresh(context,applicationArguments);定义一个空的模板给其他子类实现重写
 十八、listeners.started(context);使用广播和回调机制通知监听器springboot容器启动成功
 十九、listeners.running(context);使用广播和回调机制通知监听器springboot容器已成功running
 二十、最后返回当前的上下文


*intellij创建maven项目时，加载慢。解决方式：在创建maven项目时加上archtypeCatalog参数
 详见https://www.cnblogs.com/del88/p/6286887.html

*利用SpringApplicationRunListener接口SPI扩展可以实现加载外部配置文件（如：myconfig.properties）
 在该接口environmentPrepared(ConfigurableEnvironment cf)方法中，外部加载好的配置可以附加到cf实例中去。
？？后期结合jeesite来学习springboot常用的扩展接口

?springboot如何写复杂的sql语句

*在使用项目一些工具依赖时，可以优先到spring-boot-dependencies去查找依赖。

*Spring Boot 配置文件的加载顺序，依次为 bootstrap.properties -> bootstrap.yml -> application.properties -> application.yml ，其中 bootstrap.properties 配置为最高优先级
